00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/2/2018 9:21:52 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:  OP-CODE and string buffer
00000000                             6  *-----------------------------------------------------------
00000000                             7      *ORG    $1000
00000000                             8      
00000000  =00002000                  9  BUFF_POINT      EQU     $2000   * where the string buffer lives
00000000  =00000000                 10  BYTE_COUNTER    EQU     0       * counter for the number of bytes the string has
00000000  =00003000                 11  STRING_STORE    EQU     $3000   * where the beginning of the temp string storage lives
00000000                            12  
00000000                            13  
00000000                            14  *START:                  ; first instruction of program
00000000                            15  
00000000                            16  OPCODE_BEGIN:
00000000  43F8 2000                 17      LEA        BUFF_POINT,A1        * pointer to string buffer
00000004  45F8 3000                 18      LEA        STRING_STORE, A2     * A2 stores the pointer to end of string
00000008  47F8 3000                 19      LEA        STRING_STORE, A3     * A3 stores the pointer to start of string
0000000C  31FC 0000 0000            20      MOVE.W     #0, BYTE_COUNTER     * starting byte counter with 0  
00000012                            21      
00000012  1A3C 0000                 22      MOVE.B      #0, D5                * RESETTING HEX CONVERTER COUNTER
00000016  2C0C                      23      MOVE.L      A4,D6
00000018  2E06                      24      MOVE.L      D6,D7
0000001A  14F9 0000052A             25      MOVE.B      MONEY, (A2)+         * adding a MONEY SYMBOL to the beginning
00000020  5278 0000                 26      ADD.W       #1, BYTE_COUNTER
00000024  6000 0436                 27      BRA         HEX_CHAR
00000028                            28  CONTINUE:
00000028  4EB9 0000049E             29      JSR         TAB   
0000002E                            30  
0000002E                            31      
0000002E                            32          
0000002E                            33  * work in progress, start of op-code debugging
0000002E                            34  FIRST4BITS:
0000002E  3414                      35      MOVE.W  (A4),D2    * moving long of address $1000 into D2
00000030  3C0C                      36      MOVE.W  A4,D6   * ******temp holds the address, needs to be changed************
00000032  3602                      37      MOVE.W  D2,D3       * save a copy of of contents in D3
00000034                            38      
00000034  B4BC 4E75FFFF             39      CMP.L   #$4E75FFFF, D2
0000003A  6700 0172                 40      BEQ     OP_RTS
0000003E                            41      
0000003E  2403                      42      MOVE.L  D3,D2
00000040  C47C F1C0                 43      AND.W   #%1111000111000000, D2
00000044  B47C 41C0                 44      CMP.W   #%0100000111000000, D2
00000048  6700 003E                 45      BEQ     LEA_MODE
0000004C                            46      
0000004C  2403                      47      MOVE.L  D3,D2
0000004E  E95A                      48      ROL.W   #4,D2               * rotate to the left by 4 to see first 4 bits
00000050  C43C 000F                 49      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
00000054                            50      
00000054                            51  
00000054  B43C 0001                 52      CMP.B   #%00000001, D2      * move.b
00000058  6700 0174                 53      BEQ     MOVE
0000005C  B43C 0003                 54      CMP.B   #%00000011, D2      * move.l
00000060  6700 016C                 55      BEQ     MOVE
00000064  B43C 0002                 56      CMP.B   #%00000010, D2      * move.w
00000068  6700 0164                 57      BEQ     MOVE
0000006C  B43C 000D                 58      CMP.B   #%00001101, D2      * ADD
00000070  6700 007C                 59      BEQ     ADD
00000074  B43C 0009                 60      CMP.B   #%00001001, D2      * ADD
00000078  6700 0054                 61      BEQ     SUB
0000007C  B43C 000C                 62      CMP.B   #%00001100, D2      * ADD
00000080  6700 0026                 63      BEQ     MULS
00000084                            64      *CMP.B   #%00000000, D2      * somthing tbd
00000084                            65      *BEQ     _0000
00000084  6000 0394                 66      BRA UNKNOWN
00000088                            67      
00000088                            68  LEA_MODE:
00000088  14F9 000004F0             69      MOVE.B  L, (A2)+
0000008E  14F9 000004E2             70      MOVE.B  E, (A2)+
00000094  14F9 000004DA             71      MOVE.B  A, (A2)+
0000009A  4EB9 0000049E             72      JSR     TAB
000000A0  5678 0000                 73      ADD.W   #3, BYTE_COUNTER
000000A4                            74      *JSR     GET_EA
000000A4  6000 031E                 75      BRA     MOVE_DEST_AN_010
000000A8                            76      
000000A8                            77  MULS:
000000A8  14F9 000004F2             78      MOVE.B  M, (A2)+
000000AE  14F9 00000502             79      MOVE.B  U, (A2)+
000000B4  14F9 000004F0             80      MOVE.B  L, (A2)+
000000BA  14F9 000004FE             81      MOVE.B  S, (A2)+
000000C0  14F9 00000524             82      MOVE.B  SPACE,(A2)+
000000C6  5A78 0000                 83      ADD.W      #5, BYTE_COUNTER
000000CA  6000 036A                 84      BRA     BUFFER_LOOP        *ADD_SIZE also works for SUB size
000000CE                            85  
000000CE                            86  
000000CE                            87  SUB:
000000CE  14F9 000004FE             88      MOVE.B  S, (A2)+
000000D4  14F9 00000502             89      MOVE.B  U, (A2)+
000000DA  14F9 000004DC             90      MOVE.B  B, (A2)+
000000E0  14F9 00000512             91      MOVE.B  DOT, (A2)+
000000E6  5878 0000                 92      ADD.W      #4, BYTE_COUNTER
000000EA  6000 0064                 93      BRA     ADD_SIZE        *ADD_SIZE also works for SUB size
000000EE                            94      
000000EE                            95  ADD:
000000EE  3403                      96       MOVE.W  D3, D2      * reset address contents to before bitmask
000000F0  E15A                      97       ROL.W   #8, D2     * now checking the destination mode set by rotating left by 10
000000F2  C43C 0001                 98       AND.B   #%00000001, D2  * bitmask to see 3 bits for mode
000000F6  B43C 0000                 99       CMP.B   #%00000000, D2      * move Dn
000000FA  6700 000E                100       BEQ     ADD_DN        
000000FE  B43C 0001                101       CMP.B   #%00000001, D2      * move An
00000102  6700 0026                102       BEQ     ADD_AN
00000106  6000 0312                103       BRA     UNKNOWN      
0000010A                           104       
0000010A                           105  ADD_DN:
0000010A  14F9 000004DA            106      MOVE.B  A, (A2)+
00000110  14F9 000004E0            107      MOVE.B  D, (A2)+
00000116  14F9 000004E0            108      MOVE.B  D, (A2)+
0000011C  14F9 00000512            109      MOVE.B  DOT, (A2)+
00000122  5878 0000                110      ADD.W      #4, BYTE_COUNTER
00000126  6000 0028                111      BRA     ADD_SIZE
0000012A                           112   
0000012A                           113  ADD_AN:
0000012A  14F9 000004DA            114      MOVE.B  A, (A2)+
00000130  14F9 000004E0            115      MOVE.B  D, (A2)+
00000136  14F9 000004E0            116      MOVE.B  D, (A2)+
0000013C  14F9 000004DA            117      MOVE.B  A, (A2)+
00000142  14F9 00000512            118      MOVE.B  DOT, (A2)+
00000148  5A78 0000                119      ADD.W      #5, BYTE_COUNTER
0000014C  6000 0002                120      BRA     ADD_SIZE
00000150                           121  
00000150                           122  
00000150                           123  ADD_SIZE:
00000150  3403                     124      MOVE.W  D3, D2      * reset address contents to before bitmask
00000152  E15A                     125      ROL.W   #8,D2       * rotate to the left by 8 to see first 4 bits
00000154  E55A                     126      ROL.W   #2,D2       * rotate to the left by 2 to see first 4 bits
00000156  C43C 0003                127      AND.B   #%00000011, D2      * bitmask to check the first 4 bits for opcode type
0000015A  B43C 0000                128      CMP.B   #%00000000, D2      * move.b
0000015E  6700 0012                129      BEQ     ADD_BYTE
00000162  B43C 0001                130      CMP.B   #%00000001, D2      * move.l
00000166  6700 001E                131      BEQ     ADD_WORD
0000016A  B43C 0002                132      CMP.B   #%00000010, D2      * move.w
0000016E  6700 002A                133      BEQ     ADD_LONG
00000172                           134      
00000172                           135  ADD_BYTE:
00000172  14F9 000004DC            136      MOVE.B  B, (A2)+
00000178  14F9 00000524            137      MOVE.B  SPACE,(A2)+
0000017E  5478 0000                138      ADD.W      #2, BYTE_COUNTER
00000182  6000 02B2                139      BRA     BUFFER_LOOP
00000186                           140  
00000186                           141  ADD_WORD:
00000186  14F9 00000506            142      MOVE.B  W, (A2)+
0000018C  14F9 00000524            143      MOVE.B  SPACE,(A2)+
00000192  5478 0000                144      ADD.W      #2, BYTE_COUNTER
00000196  6000 029E                145      BRA     BUFFER_LOOP
0000019A                           146  
0000019A                           147  ADD_LONG:
0000019A  14F9 000004F0            148      MOVE.B  L, (A2)+
000001A0  14F9 00000524            149      MOVE.B  SPACE,(A2)+
000001A6  5478 0000                150      ADD.W      #2, BYTE_COUNTER
000001AA  6000 028A                151      BRA     BUFFER_LOOP
000001AE                           152  
000001AE                           153      
000001AE                           154  OP_RTS:
000001AE  14F9 000004FC            155      MOVE.B  R, (A2)+
000001B4  14F9 00000500            156      MOVE.B  T, (A2)+
000001BA  14F9 000004FE            157      MOVE.B  S, (A2)+
000001C0  14F9 00000524            158      MOVE.B  SPACE,(A2)+
000001C6  5878 0000                159      ADD.W   #4, BYTE_COUNTER
000001CA  6000 026A                160      BRA     BUFFER_LOOP
000001CE                           161          
000001CE                           162  MOVE:
000001CE  3403                     163      MOVE.W  D3, D2      * reset address contents to before bitmask
000001D0  E15A                     164      ROL.W   #8, D2     * now checking the destination mode set by rotating left by 10
000001D2  E55A                     165      ROL.W   #2, D2
000001D4  C43C 0007                166      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000001D8  B43C 0000                167      CMP.B   #%00000000, D2      * move Dn
000001DC  6700 000E                168      BEQ     MOVE_DN
000001E0  B43C 0001                169      CMP.B   #%00000001, D2      * move An
000001E4  6C00 002C                170      BGE     MOVE_AN
000001E8  6000 0230                171      BRA     UNKNOWN
000001EC                           172      
000001EC                           173  *desination mode is register
000001EC                           174  MOVE_DN:
000001EC  14F9 000004F2            175      MOVE.B  M, (A2)+
000001F2  14F9 000004F6            176      MOVE.B  O, (A2)+
000001F8  14F9 00000504            177      MOVE.B  V, (A2)+
000001FE  14F9 000004E2            178      MOVE.B  E, (A2)+
00000204  14F9 00000512            179      MOVE.B  DOT, (A2)+
0000020A  5A78 0000                180      ADD.W      #5, BYTE_COUNTER
0000020E  6000 002E                181      BRA MOVE_SIZE
00000212                           182      
00000212                           183      
00000212                           184  MOVE_AN:
00000212  14F9 000004F2            185      MOVE.B  M, (A2)+
00000218  14F9 000004F6            186      MOVE.B  O, (A2)+
0000021E  14F9 00000504            187      MOVE.B  V, (A2)+
00000224  14F9 000004E2            188      MOVE.B  E, (A2)+
0000022A  14F9 000004DA            189      MOVE.B  A, (A2)+
00000230  14F9 00000512            190      MOVE.B  DOT, (A2)+
00000236  5C78 0000                191      ADD.W      #6, BYTE_COUNTER
0000023A  6000 0002                192      BRA MOVE_SIZE
0000023E                           193  
0000023E                           194  
0000023E                           195      
0000023E                           196  MOVE_SIZE:
0000023E  3403                     197      MOVE.W  D3, D2      * reset address contents to before bitmask
00000240  E95A                     198      ROL.W   #4,D2       * rotate to the left by 4 to see first 4 bits
00000242  C43C 000F                199      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
00000246  B43C 0001                200      CMP.B   #%00000001, D2      * move.b
0000024A  6700 0012                201      BEQ     BYTE
0000024E  B43C 0003                202      CMP.B   #%00000011, D2      * move.W
00000252  6700 001E                203      BEQ     WORD
00000256  B43C 0002                204      CMP.B   #%00000010, D2      * move.L
0000025A  6700 002A                205      BEQ     LONG
0000025E                           206  
0000025E                           207      
0000025E                           208  BYTE:
0000025E  14F9 000004DC            209      MOVE.B  B, (A2)+
00000264  14F9 00000524            210      MOVE.B  SPACE,(A2)+
0000026A  5478 0000                211      ADD.W   #2, BYTE_COUNTER
0000026E  6000 002A                212      BRA     MOVE_SOURCE
00000272                           213  
00000272                           214  WORD:
00000272  14F9 00000506            215      MOVE.B  W, (A2)+
00000278  14F9 00000524            216      MOVE.B  SPACE, (A2)+
0000027E  5478 0000                217      ADD.W   #2, BYTE_COUNTER
00000282  6000 0016                218      BRA     MOVE_SOURCE
00000286                           219      
00000286                           220  LONG:
00000286  14F9 000004F0            221      MOVE.B  L, (A2)+
0000028C  14F9 00000524            222      MOVE.B  SPACE,(A2)+
00000292  5478 0000                223      ADD.W   #2, BYTE_COUNTER
00000296  6000 0002                224      BRA     MOVE_SOURCE
0000029A                           225      
0000029A                           226      
0000029A                           227  MOVE_SOURCE:
0000029A  3403                     228      MOVE.W  D3, D2      * reset address contents to before bitmask
0000029C  E15A                     229      ROL.W   #8, D2      * rotate to the left by 4 to see first 4 bits
0000029E  EB5A                     230      ROL.W   #5, D2
000002A0  C43C 0007                231      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000002A4  B43C 0000                232      CMP.B   #%00000000, D2      * move.b
000002A8  6700 001A                233      BEQ     MOVE_SOURCE_DN
000002AC  B43C 0001                234      CMP.B   #%00000001, D2
000002B0  6700 0032                235      BEQ     MOVE_SOURCE_AN
000002B4  B43C 0002                236      CMP.B   #%00000010, D2
000002B8  6700 004A                237      BEQ     MOVE_SOURCE_AN_010
000002BC  B43C 0003                238      CMP.B   #%00000011, D2
000002C0  6700 006E                239      BEQ     MOVE_SOURCE_AN_011
000002C4                           240    
000002C4                           241      
000002C4                           242  MOVE_SOURCE_DN:
000002C4  3403                     243      MOVE.W  D3, D2      * reset address contents to before bitmask
000002C6                           244   *   SWAP    D2
000002C6  C43C 0007                245      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000002CA  0602 0030                246      ADD.B   #$30, D2
000002CE  14F9 000004E0            247      MOVE.B  D, (A2)+
000002D4  14C2                     248      MOVE.B  D2, (A2)+
000002D6  14F9 00000528            249      MOVE.B  COMMA, (A2)+  
000002DC  5678 0000                250      ADD.W      #3, BYTE_COUNTER
000002E0  6000 0080                251      BRA     MOVE_DEST
000002E4                           252      
000002E4                           253  MOVE_SOURCE_AN:
000002E4  3403                     254      MOVE.W  D3, D2      * reset address contents to before bitmask
000002E6                           255      *SWAP    D2          * ***** NOT SURE THIS WORKS>> CHECK
000002E6  C43C 0007                256      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
000002EA  0602 0030                257      ADD.B   #$30, D2
000002EE  14F9 000004DA            258      MOVE.B  A, (A2)+
000002F4  14C2                     259      MOVE.B  D2, (A2)+
000002F6  14F9 00000528            260      MOVE.B  COMMA, (A2)+  
000002FC  5678 0000                261      ADD.W      #3, BYTE_COUNTER
00000300  6000 0060                262      BRA     MOVE_DEST
00000304                           263      
00000304                           264  MOVE_SOURCE_AN_010:
00000304  3403                     265      MOVE.W  D3, D2      * reset address contents to before bitmask
00000306  C43C 0007                266      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
0000030A  0602 0030                267      ADD.B   #$30, D2
0000030E  14F9 0000050E            268      MOVE.B  OPEN_PARA, (A2)+
00000314  14F9 000004DA            269      MOVE.B  A, (A2)+
0000031A  14C2                     270      MOVE.B  D2, (A2)+
0000031C  14F9 00000510            271      MOVE.B  CLOSE_PARA, (A2)+
00000322  14F9 00000528            272      MOVE.B  COMMA, (A2)+  
00000328  5A78 0000                273      ADD.W      #5, BYTE_COUNTER
0000032C  6000 0034                274      BRA     MOVE_DEST
00000330                           275      
00000330                           276  MOVE_SOURCE_AN_011:
00000330  3403                     277      MOVE.W  D3, D2      * reset address contents to before bitmask
00000332  C43C 0007                278      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
00000336  0602 0030                279      ADD.B   #$30, D2
0000033A  14F9 0000050E            280      MOVE.B  OPEN_PARA, (A2)+
00000340  14F9 000004DA            281      MOVE.B  A, (A2)+
00000346  14C2                     282      MOVE.B  D2, (A2)+
00000348  14F9 00000510            283      MOVE.B  CLOSE_PARA, (A2)+
0000034E  14F9 00000514            284      MOVE.B  PLUS, (A2)+
00000354  14F9 00000528            285      MOVE.B  COMMA, (A2)+  
0000035A  5C78 0000                286      ADD.W      #6, BYTE_COUNTER
0000035E  6000 0002                287      BRA     MOVE_DEST
00000362                           288  
00000362                           289  
00000362                           290          
00000362                           291  MOVE_DEST:
00000362  3403                     292      MOVE.W  D3, D2      * reset address contents to before bitmask
00000364  E15A                     293      ROL.W   #8, D2      * rotate to the left by 4 to see first 4 bits
00000366  E55A                     294      ROL.W   #2, D2
00000368  C43C 0007                295      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
0000036C  B43C 0000                296      CMP.B   #%00000000, D2      * move.b
00000370  6700 001A                297      BEQ     MOVE_DEST_DN
00000374  B43C 0001                298      CMP.B   #%00000001, D2
00000378  6700 002E                299      BEQ     MOVE_DEST_AN
0000037C  B43C 0002                300      CMP.B   #%00000010, D2
00000380  6700 0042                301      BEQ     MOVE_DEST_AN_010
00000384  B43C 0003                302      CMP.B   #%00000011, D2
00000388  6700 0062                303      BEQ     MOVE_DEST_AN_011
0000038C                           304      
0000038C                           305  MOVE_DEST_DN:
0000038C  3403                     306      MOVE.W  D3, D2      * reset address contents to before bitmask
0000038E  EF5A                     307      ROL.W   #7,D2
00000390  C43C 0007                308      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00000394  0602 0030                309      ADD.B   #$30, D2
00000398  14F9 000004E0            310      MOVE.B  D, (A2)+
0000039E  14C2                     311      MOVE.B  D2, (A2)+
000003A0  5478 0000                312      ADD.W   #2, BYTE_COUNTER
000003A4  6000 0090                313      BRA     BUFFER_LOOP
000003A8                           314      
000003A8                           315  MOVE_DEST_AN:
000003A8  3403                     316      MOVE.W  D3, D2      * reset address contents to before bitmask
000003AA  EF5A                     317      ROL.W   #7, D2
000003AC  C43C 0007                318      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000003B0  0602 0030                319      ADD.B   #$30, D2
000003B4  14F9 000004DA            320      MOVE.B  A, (A2)+
000003BA  14C2                     321      MOVE.B  D2, (A2)+
000003BC  5478 0000                322      ADD.W   #2, BYTE_COUNTER
000003C0  6000 0074                323      BRA     BUFFER_LOOP
000003C4                           324      
000003C4                           325  MOVE_DEST_AN_010:
000003C4  3403                     326      MOVE.W  D3, D2      * reset address contents to before bitmask
000003C6  EF5A                     327      ROL.W   #7, D2
000003C8  C43C 0007                328      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000003CC  0602 0030                329      ADD.B   #$30, D2
000003D0  14F9 0000050E            330      MOVE.B  OPEN_PARA, (A2)+
000003D6  14F9 000004DA            331      MOVE.B  A, (A2)+
000003DC  14C2                     332      MOVE.B  D2, (A2)+
000003DE  14F9 00000510            333      MOVE.B  CLOSE_PARA, (A2)+
000003E4  5878 0000                334      ADD.W   #4, BYTE_COUNTER
000003E8  6000 004C                335      BRA     BUFFER_LOOP
000003EC                           336      
000003EC                           337  MOVE_DEST_AN_011:
000003EC  3403                     338      MOVE.W  D3, D2      * reset address contents to before bitmask
000003EE  EF5A                     339      ROL.W   #7, D2
000003F0  C43C 0007                340      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000003F4  0602 0030                341      ADD.B   #$30, D2
000003F8  14F9 0000050E            342      MOVE.B  OPEN_PARA, (A2)+
000003FE  14F9 000004DA            343      MOVE.B  A, (A2)+
00000404  14C2                     344      MOVE.B  D2, (A2)+
00000406  14F9 00000510            345      MOVE.B  CLOSE_PARA, (A2)+
0000040C  14F9 00000514            346      MOVE.B  PLUS, (A2)+
00000412  5A78 0000                347      ADD.W   #5, BYTE_COUNTER
00000416  6000 001E                348      BRA     BUFFER_LOOP
0000041A                           349  
0000041A                           350  
0000041A                           351  
0000041A                           352  
0000041A                           353  
0000041A                           354  * unkown op-code type
0000041A                           355  UNKNOWN:
0000041A  14F9 000004E0            356      MOVE.B  D, (A2)+
00000420  14F9 000004DA            357      MOVE.B  A, (A2)+
00000426  14F9 00000500            358      MOVE.B  T, (A2)+
0000042C  14F9 000004DA            359      MOVE.B  A, (A2)+
00000432  5878 0000                360      ADD.W      #4, BYTE_COUNTER
00000436                           361  
00000436                           362  
00000436                           363  BUFFER_LOOP:
00000436  B6CA                     364      CMPA       A2,A3                * checking if start/end address match of string
00000438  6700 0006                365      BEQ        PRINT_BUFFER         * finished if addresses match
0000043C  12DB                     366      MOVE.B     (A3)+,(A1)+          * move byte letter from string_store to A1
0000043E  60F6                     367      BRA        BUFFER_LOOP          * loop back untill start/end addresses match
00000440                           368  
00000440                           369  PRINT_BUFFER:
00000440  103C 0000                370      MOVE.B     #0, D0               * trap task 0 to print string in buffer A1
00000444  43F8 2000                371      LEA        BUFF_POINT,A1    
00000448  3238 0000                372      MOVE.W     BYTE_COUNTER, D1     * need to say how many bytes to print in D1
0000044C  4E4F                     373      TRAP #15
0000044E                           374  
Line 375 ERROR: Undefined symbol
0000044E  4EF9 004DBD16            375      JMP     NEXT_ADDRESS
00000454                           376  
00000454                           377  TEST:
00000454  4EB9 0000045A            378      JSR TEST2
0000045A                           379  
0000045A                           380  TEST2:
0000045A  4E75                     381      RTS
0000045C                           382      
0000045C                           383  HEX_CHAR:
0000045C  BA3C 0004                384      CMP.B   #4,D5
00000460  6700 FBC6                385      BEQ     CONTINUE
00000464  2E06                     386      MOVE.L  D6,D7
00000466  CC7C F000                387      AND.W   #%1111000000000000, D6
0000046A  E05E                     388      ROR.W   #8,D6
0000046C  E85E                     389      ROR.W   #4,D6
0000046E  5205                     390      ADD.B   #1,D5
00000470  BCBC 00000009            391      CMP.L   #9, D6
00000476  6F00 0006                392      BLE     NUMBER
0000047A  6C00 0012                393      BGE     LETTER   
0000047E                           394      
0000047E                           395  NUMBER:
0000047E  0606 0030                396      ADD.B   #$30, D6
00000482  14C6                     397      MOVE.B  D6, (A2)+
00000484  5278 0000                398      ADD.W      #1, BYTE_COUNTER
00000488  E95F                     399      ROL.W   #4,D7
0000048A  2C07                     400      MOVE.L  D7,D6
0000048C  60CE                     401      BRA     HEX_CHAR
0000048E                           402  
0000048E                           403  LETTER:
0000048E  0606 0037                404      ADD.B   #$37, D6
00000492  14C6                     405      MOVE.B  D6, (A2)+
00000494  5278 0000                406      ADD.W      #1, BYTE_COUNTER
00000498  E95F                     407      ROL.W   #4,D7
0000049A  2C07                     408      MOVE.L  D7,D6
0000049C  60BE                     409      BRA     HEX_CHAR
0000049E                           410  
0000049E                           411  TAB:
0000049E  14F9 00000524            412      MOVE.B  SPACE, (A2)+
000004A4  14F9 00000524            413      MOVE.B  SPACE, (A2)+
000004AA  14F9 00000524            414      MOVE.B  SPACE, (A2)+
000004B0  14F9 00000524            415      MOVE.B  SPACE, (A2)+
000004B6  14F9 00000524            416      MOVE.B  SPACE, (A2)+
000004BC  5A78 0000                417      ADD.W      #5, BYTE_COUNTER
000004C0  4E75                     418      RTS
000004C2                           419  
000004C2                           420  
000004C2                           421     
000004C2  FFFF FFFF                422      SIMHALT             ; halt simulator
000004C6                           423  
000004C6                           424  
000004C6                           425  * Put variables and constants here
000004C6= 30 00                    426  _0          DC.B '0',0
000004C8= 31 00                    427  _1          DC.B '1',0
000004CA= 32 00                    428  _2          DC.B '2',0
000004CC= 33 00                    429  _3          DC.B '3',0
000004CE= 34 00                    430  _4          DC.B '4',0
000004D0= 35 00                    431  _5          DC.B '5',0
000004D2= 36 00                    432  _6          DC.B '6',0
000004D4= 37 00                    433  _7          DC.B '7',0
000004D6= 38 00                    434  _8          DC.B '8',0
000004D8= 39 00                    435  _9          DC.B '9',0
000004DA= 41 00                    436  A           DC.B 'A',0
000004DC= 42 00                    437  B           DC.B 'B',0
000004DE= 43 00                    438  C           DC.B 'C',0
000004E0= 44 00                    439  D           DC.B 'D',0
000004E2= 45 00                    440  E           DC.B 'E',0
000004E4= 46 00                    441  F           DC.B 'F',0
000004E6= 47 00                    442  G           DC.B 'G',0
000004E8= 48 00                    443  H           DC.B 'H',0
000004EA= 49 00                    444  I           DC.B 'I',0
000004EC= 4A 00                    445  J           DC.B 'J',0
000004EE= 4B 00                    446  K           DC.B 'K',0
000004F0= 4C 00                    447  L           DC.B 'L',0
000004F2= 4D 00                    448  M           DC.B 'M',0
000004F4= 4E 00                    449  N           DC.B 'N',0
000004F6= 4F 00                    450  O           DC.B 'O',0
000004F8= 50 00                    451  P           DC.B 'P',0
000004FA= 51 00                    452  Q           DC.B 'Q',0
000004FC= 52 00                    453  R           DC.B 'R',0
000004FE= 53 00                    454  S           DC.B 'S',0
00000500= 54 00                    455  T           DC.B 'T',0
00000502= 55 00                    456  U           DC.B 'U',0
00000504= 56 00                    457  V           DC.B 'V',0
00000506= 57 00                    458  W           DC.B 'W',0
00000508= 58 00                    459  X           DC.B 'X',0
0000050A= 59 00                    460  Y           DC.B 'Y',0
0000050C= 5A 00                    461  Z           DC.B 'Z',0
0000050E= 28 00                    462  OPEN_PARA   DC.B '(',0
00000510= 29 00                    463  CLOSE_PARA  DC.B ')',0
00000512= 2E 00                    464  DOT         DC.B '.',0
00000514= 2B 00                    465  PLUS        DC.B '+',0
00000516= 2D 00                    466  MINUS       DC.B '-',0  
00000518= 46494E49 53484544 ...    467  FINISHED    DC.L 'FINISHED',0
00000524= 20 00                    468  SPACE       DC.B ' ',0
00000526= 3F 00                    469  QUESTION    DC.B '?',0
00000528= 2C 00                    470  COMMA       DC.B ',',0
0000052A= 24 00                    471  MONEY       DC.B '$',0
0000052C                           472  
0000052C                           473  
0000052C                           474      *END    START        ; last line of source
0000052C                           475  
0000052C                           476  
0000052C                           477  
0000052C                           478  
0000052C                           479  
0000052C                           480  
0000052C                           481  
0000052C                           482  
0000052C                           483  
0000052C                           484  
0000052C                           485  
0000052C                           486  
0000052C                           487  
0000052C                           488  
0000052C                           489  
0000052C                           490  
0000052C                           491  
Line 492 WARNING: END directive missing, starting address not set

1 error detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   4DA
ADD                 EE
ADD_AN              12A
ADD_BYTE            172
ADD_DN              10A
ADD_LONG            19A
ADD_SIZE            150
ADD_WORD            186
B                   4DC
BUFFER_LOOP         436
BUFF_POINT          2000
BYTE                25E
BYTE_COUNTER        0
C                   4DE
CLOSE_PARA          510
COMMA               528
CONTINUE            28
D                   4E0
DOT                 512
E                   4E2
F                   4E4
FINISHED            518
FIRST4BITS          2E
G                   4E6
H                   4E8
HEX_CHAR            45C
I                   4EA
J                   4EC
K                   4EE
L                   4F0
LEA_MODE            88
LETTER              48E
LONG                286
M                   4F2
MINUS               516
MONEY               52A
MOVE                1CE
MOVE_AN             212
MOVE_DEST           362
MOVE_DEST_AN        3A8
MOVE_DEST_AN_010    3C4
MOVE_DEST_AN_011    3EC
MOVE_DEST_DN        38C
MOVE_DN             1EC
MOVE_SIZE           23E
MOVE_SOURCE         29A
MOVE_SOURCE_AN      2E4
MOVE_SOURCE_AN_010  304
MOVE_SOURCE_AN_011  330
MOVE_SOURCE_DN      2C4
MULS                A8
N                   4F4
NUMBER              47E
O                   4F6
OPCODE_BEGIN        0
OPEN_PARA           50E
OP_RTS              1AE
P                   4F8
PLUS                514
PRINT_BUFFER        440
Q                   4FA
QUESTION            526
R                   4FC
S                   4FE
SPACE               524
STRING_STORE        3000
SUB                 CE
T                   500
TAB                 49E
TEST                454
TEST2               45A
U                   502
UNKNOWN             41A
V                   504
W                   506
WORD                272
X                   508
Y                   50A
Z                   50C
_0                  4C6
_1                  4C8
_2                  4CA
_3                  4CC
_4                  4CE
_5                  4D0
_6                  4D2
_7                  4D4
_8                  4D6
_9                  4D8
