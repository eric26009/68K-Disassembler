00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/23/2018 5:28:46 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:  OP-CODE and string buffer
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      
00001000  =00002000                  9  BUFF_POINT      EQU     $2000   * where the string buffer lives
00001000  =00000000                 10  BYTE_COUNTER    EQU     0       * counter for the number of bytes the string has
00001000  =00003000                 11  STRING_STORE    EQU     $3000   * where the beginning of the temp string storage lives
00001000                            12  
00001000                            13  
00001000                            14  START:                  ; first instruction of program
00001000                            15  
00001000                            16  * Put program code here
00001000  103C 0000                 17      MOVE.B     #0, D0               * trap task 0 to print string in buffer A1
00001004  43F8 2000                 18      LEA        BUFF_POINT,A1        * pointer to string buffer
00001008  45F8 3000                 19      LEA        STRING_STORE, A2     * A2 stores the pointer to end of string
0000100C  47F8 3000                 20      LEA        STRING_STORE, A3     * A3 stores the pointer to start of string
00001010  31FC 0000 0000            21      MOVE.W     #0, BYTE_COUNTER     * starting byte counter with 0    
00001016                            22      
00001016  1E01                      23      MOVE.B   D1,D7                   * LINE FOR TESTING
00001018                            24       
00001018  14F9 0000111C             25      MOVE.B     I,(A2)+              * testing adding letters to string_store         
0000101E  14F9 00001130             26      MOVE.B     S,(A2)+              * .. same as above
00001024  14F9 0000115C             27      MOVE.B     SPACE,(A2)+
0000102A  14F9 00001132             28      MOVE.B     T,(A2)+
00001030  14F9 0000111A             29      MOVE.B     H,(A2)+
00001036  14F9 0000111C             30      MOVE.B     I,(A2)+
0000103C  14F9 00001130             31      MOVE.B     S,(A2)+
00001042  14F9 0000115C             32      MOVE.B     SPACE,(A2)+
00001048  14F9 00001138             33      MOVE.B     W,(A2)+
0000104E  14F9 00001128             34      MOVE.B     O,(A2)+
00001054  14F9 0000112E             35      MOVE.B     R,(A2)+
0000105A  14F9 00001120             36      MOVE.B     K,(A2)+
00001060  14F9 0000111C             37      MOVE.B     I,(A2)+
00001066  14F9 00001126             38      MOVE.B     N,(A2)+
0000106C  14F9 00001118             39      MOVE.B     G,(A2)+
00001072  14F9 0000115E             40      MOVE.B     QUESTION,(A2)+
00001078  14FC 000A                 41      MOVE.B     #$A,(A2)+            * new line
0000107C  14FC 000D                 42      MOVE.B     #$D,(A2)+            * carriage return
00001080  0678 0012 0000            43      ADD.W      #18, BYTE_COUNTER    * need to say how many bytes are in the string.
00001086                            44      
00001086                            45          
00001086                            46  * work in progress, start of op-code debugging
00001086                            47  FIRST4BITS:
00001086  2438 1016                 48      MOVE.L  $1016,D2    * moving long of address $1000 into D2
0000108A  E95A                      49      ROL.W   #4,D2
0000108C                            50      
0000108C  C43C 000F                 51      AND.B   #%00001111, D2
00001090                            52      
00001090  B43C 0001                 53      CMP.B   #%00000001, D2      * move.b
00001094  6700 001A                 54      BEQ     _0001
00001098  B43C 0003                 55      CMP.B   #%00000011, D2      * move.l
0000109C  6700 003A                 56      BEQ     _0011
000010A0  B43C 0002                 57      CMP.B   #%00000010, D2      * move.w
000010A4  6700 0032                 58      BEQ     _0010
000010A8  B43C 0000                 59      CMP.B   #%00000000, D2      * somthing tbd
000010AC  6700 002A                 60      BEQ     _0000
000010B0                            61      
000010B0                            62      
000010B0                            63  *move.b 
000010B0                            64  _0001:
000010B0  14F9 00001124             65      MOVE.B  M, (A2)+
000010B6  14F9 00001128             66      MOVE.B  O, (A2)+
000010BC  14F9 00001136             67      MOVE.B  V, (A2)+
000010C2  14F9 00001114             68      MOVE.B  E, (A2)+
000010C8  14F9 0000114D             69      MOVE.B  DOT, (A2)+
000010CE  14F9 0000110E             70      MOVE.B  B, (A2)+
000010D4  5C78 0000                 71      ADD.W      #6, BYTE_COUNTER
000010D8                            72      
000010D8                            73      
000010D8                            74  * move.l
000010D8                            75  _0011:
000010D8                            76  
000010D8                            77  *move.w
000010D8                            78  _0010:
000010D8                            79  
000010D8                            80  * something that begins with 0000
000010D8                            81  _0000:
000010D8                            82  
000010D8                            83  
000010D8                            84  * unkown op-code type
000010D8                            85  _UNKNOWN:
000010D8  14F9 00001112             86      MOVE.B  D, (A2)+
000010DE  14F9 0000110C             87      MOVE.B  A, (A2)+
000010E4  14F9 00001132             88      MOVE.B  T, (A2)+
000010EA  14F9 0000110C             89      MOVE.B  A, (A2)+
000010F0  5878 0000                 90      ADD.W      #4, BYTE_COUNTER
000010F4                            91  
000010F4                            92  
000010F4                            93  BUFFER_LOOP:
000010F4  B6CA                      94      CMPA       A2,A3                * checking if start/end address match of string
000010F6  6700 0006                 95      BEQ        PRINT_BUFFER         * finished if addresses match
000010FA  12DB                      96      MOVE.B     (A3)+,(A1)+          * move byte letter from string_store to A1
000010FC  60F6                      97      BRA        BUFFER_LOOP               * loop back untill start/end addresses match
000010FE                            98  
000010FE                            99  PRINT_BUFFER:
000010FE  43F8 2000                100      LEA        BUFF_POINT,A1    
00001102  3238 0000                101      MOVE.W     BYTE_COUNTER, D1
00001106  4E4F                     102      TRAP #15
00001108                           103  
00001108                           104  
00001108                           105  
00001108                           106     
00001108  FFFF FFFF                107      SIMHALT             ; halt simulator
0000110C                           108  
0000110C                           109  
0000110C                           110  * Put variables and constants here
0000110C= 41 00                    111  A           DC.B 'A',0
0000110E= 42 00                    112  B           DC.B 'B',0
00001110= 43 00                    113  C           DC.B 'C',0
00001112= 44 00                    114  D           DC.B 'D',0
00001114= 45 00                    115  E           DC.B 'E',0
00001116= 46 00                    116  F           DC.B 'F',0
00001118= 47 00                    117  G           DC.B 'G',0
0000111A= 48 00                    118  H           DC.B 'H',0
0000111C= 49 00                    119  I           DC.B 'I',0
0000111E= 4A 00                    120  J           DC.B 'J',0
00001120= 4B 00                    121  K           DC.B 'K',0
00001122= 4C 00                    122  L           DC.B 'L',0
00001124= 4D 00                    123  M           DC.B 'M',0
00001126= 4E 00                    124  N           DC.B 'N',0
00001128= 4F 00                    125  O           DC.B 'O',0
0000112A= 50 00                    126  P           DC.B 'P',0
0000112C= 51 00                    127  Q           DC.B 'Q',0
0000112E= 52 00                    128  R           DC.B 'R',0
00001130= 53 00                    129  S           DC.B 'S',0
00001132= 54 00                    130  T           DC.B 'T',0
00001134= 55 00                    131  U           DC.B 'U',0
00001136= 56 00                    132  V           DC.B 'V',0
00001138= 57 00                    133  W           DC.B 'W',0
0000113A= 58 00                    134  X           DC.B 'X',0
0000113C= 59 00                    135  Y           DC.B 'Y',0
0000113E= 5A 00                    136  Z           DC.B 'Z',0
00001140= 28 00                    137  OPEN_PARA   DC.B '(',0
00001142= 29 00                    138  CLOSE_PARA  DC.B ')',0
00001144= 20 20 20 20 20 20 ...    139  TAB         DC.B '        ',0
0000114D= 2E 00                    140  DOT         DC.B '.',0
0000114F= 2B 00                    141  PLUS        DC.B '+',0
00001151= 2D 00                    142  MINUS       DC.B '-',0  
00001153= 46 49 4E 49 53 48 ...    143  FINISHED    DC.B 'FINISHED',0
0000115C= 20 00                    144  SPACE       DC.B ' ',0
0000115E= 3F 00                    145  QUESTION    DC.B '?',0
00001160                           146  
00001160                           147  
00001160                           148  
00001160                           149  
00001160                           150      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   110C
B                   110E
BUFFER_LOOP         10F4
BUFF_POINT          2000
BYTE_COUNTER        0
C                   1110
CLOSE_PARA          1142
D                   1112
DOT                 114D
E                   1114
F                   1116
FINISHED            1153
FIRST4BITS          1086
G                   1118
H                   111A
I                   111C
J                   111E
K                   1120
L                   1122
M                   1124
MINUS               1151
N                   1126
O                   1128
OPEN_PARA           1140
P                   112A
PLUS                114F
PRINT_BUFFER        10FE
Q                   112C
QUESTION            115E
R                   112E
S                   1130
SPACE               115C
START               1000
STRING_STORE        3000
T                   1132
TAB                 1144
U                   1134
V                   1136
W                   1138
X                   113A
Y                   113C
Z                   113E
_0000               10D8
_0001               10B0
_0010               10D8
_0011               10D8
_UNKNOWN            10D8
