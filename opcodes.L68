00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/26/2018 10:32:04 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:  OP-CODE and string buffer
00000000                             6  *-----------------------------------------------------------
00000000                             7      *ORG    $1000
00000000                             8      
00000000  =00002000                  9  BUFF_POINT      EQU     $2000   * where the string buffer lives
00000000  =00000000                 10  BYTE_COUNTER    EQU     0       * counter for the number of bytes the string has
00000000  =00003000                 11  STRING_STORE    EQU     $3000   * where the beginning of the temp string storage lives
00000000  =00000009                 12  TAB             EQU     $9      * ASCII hex for tab
00000000                            13  
00000000                            14  
00000000                            15  *START:                  ; first instruction of program
00000000                            16  
00000000                            17  OPCODE_BEGIN:
00000000  43F8 2000                 18      LEA        BUFF_POINT,A1        * pointer to string buffer
00000004  45F8 3000                 19      LEA        STRING_STORE, A2     * A2 stores the pointer to end of string
00000008  47F8 3000                 20      LEA        STRING_STORE, A3     * A3 stores the pointer to start of string
0000000C  31FC 0000 0000            21      MOVE.W     #0, BYTE_COUNTER     * starting byte counter with 0  
00000012                            22    
00000012  14F9 000002F6             23      MOVE.B     SPACE, (A2)+         * adding a space to the beginning
00000018  5278 0000                 24      ADD.W      #1, BYTE_COUNTER
0000001C                            25      
0000001C                            26  *    MOVE.L   (A6),A5                     * LINE FOR TESTING
0000001C                            27  *    MOVE.B   #5,D4
0000001C                            28  *    MOVE.B   D4,D5
0000001C                            29  
0000001C                            30      
0000001C                            31          
0000001C                            32  * work in progress, start of op-code debugging
0000001C                            33  FIRST4BITS:
0000001C  2414                      34      MOVE.L  (A4),D2    * moving long of address $1000 into D2
0000001E  3C0C                      35      MOVE.W  A4,D6   * ******temp holds the address, needs to be changed************
00000020  2602                      36      MOVE.L  D2,D3       * save a copy of of contents in D3
00000022                            37      
00000022  B4BC 4E75FFFF             38      CMP.L   #$4E75FFFF, D2
00000028  6700 002E                 39      BEQ     OP_RTS
0000002C                            40      
0000002C  2403                      41      MOVE.L  D3,D2
0000002E  E99A                      42      ROL.L   #4,D2       * rotate to the left by 4 to see first 4 bits
00000030  C43C 000F                 43      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
00000034                            44      
00000034                            45      
00000034  B43C 0001                 46      CMP.B   #%00000001, D2      * move.b
00000038  6700 0038                 47      BEQ     MOVE
0000003C  B43C 0003                 48      CMP.B   #%00000011, D2      * move.l
00000040  6700 0030                 49      BEQ     MOVE
00000044  B43C 0002                 50      CMP.B   #%00000010, D2      * move.w
00000048  6700 0028                 51      BEQ     MOVE
0000004C  B43C 000D                 52      CMP.B   #%00001101, D2      * ADD
00000050  6700 0006                 53      BEQ     ADD
00000054                            54      *CMP.B   #%00000000, D2      * somthing tbd
00000054                            55      *BEQ     _0000
00000054  6000 01F2                 56      BRA UNKNOWN
00000058                            57      
00000058                            58  ADD:
00000058                            59  
00000058                            60      
00000058                            61  OP_RTS:
00000058  14F9 000002CE             62      MOVE.B  R, (A2)+
0000005E  14F9 000002D2             63      MOVE.B  T, (A2)+
00000064  14F9 000002D0             64      MOVE.B  S, (A2)+
0000006A  5678 0000                 65      ADD.W   #3, BYTE_COUNTER
0000006E  6000 01F4                 66      BRA     BUFFER_LOOP
00000072                            67          
00000072                            68  MOVE:
00000072  2403                      69      MOVE.L  D3, D2      * reset address contents to before bitmask
00000074  E19A                      70      ROL.L   #8, D2     * now checking the destination mode set by rotating left by 10
00000076  E59A                      71      ROL.L   #2, D2
00000078  C43C 0007                 72      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
0000007C  B43C 0000                 73      CMP.B   #%00000000, D2      * move.b
00000080  6700 000E                 74      BEQ     MOVE_DN
00000084  B43C 0001                 75      CMP.B   #%00000001, D2
00000088  6700 002C                 76      BEQ     MOVE_AN
0000008C  6000 01BA                 77      BRA     UNKNOWN
00000090                            78      
00000090                            79  *desination mode is register
00000090                            80  MOVE_DN:
00000090  14F9 000002C4             81      MOVE.B  M, (A2)+
00000096  14F9 000002C8             82      MOVE.B  O, (A2)+
0000009C  14F9 000002D6             83      MOVE.B  V, (A2)+
000000A2  14F9 000002B4             84      MOVE.B  E, (A2)+
000000A8  14F9 000002E4             85      MOVE.B  DOT, (A2)+
000000AE  5A78 0000                 86      ADD.W      #5, BYTE_COUNTER
000000B2  6000 002E                 87      BRA MOVE_SIZE
000000B6                            88      
000000B6                            89      
000000B6                            90  MOVE_AN:
000000B6  14F9 000002C4             91      MOVE.B  M, (A2)+
000000BC  14F9 000002C8             92      MOVE.B  O, (A2)+
000000C2  14F9 000002D6             93      MOVE.B  V, (A2)+
000000C8  14F9 000002B4             94      MOVE.B  E, (A2)+
000000CE  14F9 000002AC             95      MOVE.B  A, (A2)+
000000D4  14F9 000002E4             96      MOVE.B  DOT, (A2)+
000000DA  5C78 0000                 97      ADD.W      #6, BYTE_COUNTER
000000DE  6000 0002                 98      BRA MOVE_SIZE
000000E2                            99  
000000E2                           100  
000000E2                           101      
000000E2                           102  MOVE_SIZE:
000000E2  2403                     103      MOVE.L  D3, D2      * reset address contents to before bitmask
000000E4  E99A                     104      ROL.L   #4,D2       * rotate to the left by 4 to see first 4 bits
000000E6  C43C 000F                105      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
000000EA  B43C 0001                106      CMP.B   #%00000001, D2      * move.b
000000EE  6700 0012                107      BEQ     BYTE
000000F2  B43C 0003                108      CMP.B   #%00000011, D2      * move.l
000000F6  6700 001E                109      BEQ     WORD
000000FA  B43C 0002                110      CMP.B   #%00000010, D2      * move.w
000000FE  6700 002A                111      BEQ     LONG
00000102                           112  
00000102                           113      
00000102                           114  BYTE:
00000102  14F9 000002AE            115      MOVE.B  B, (A2)+
00000108  14F9 000002F6            116      MOVE.B  SPACE,(A2)+
0000010E  5478 0000                117      ADD.W      #2, BYTE_COUNTER
00000112  6000 002A                118      BRA     MOVE_SOURCE
00000116                           119  
00000116                           120  WORD:
00000116  14F9 000002D8            121      MOVE.B  W, (A2)+
0000011C  14F9 000002F6            122      MOVE.B  SPACE, (A2)+
00000122  5478 0000                123      ADD.W      #2, BYTE_COUNTER
00000126  6000 0016                124      BRA     MOVE_SOURCE
0000012A                           125      
0000012A                           126  LONG:
0000012A  14F9 000002C2            127      MOVE.B  L, (A2)+
00000130  14F9 000002F6            128      MOVE.B  SPACE,(A2)+
00000136  5478 0000                129      ADD.W      #2, BYTE_COUNTER
0000013A  6000 0002                130      BRA     MOVE_SOURCE
0000013E                           131      
0000013E                           132      
0000013E                           133  MOVE_SOURCE:
0000013E  2403                     134      MOVE.L  D3, D2      * reset address contents to before bitmask
00000140  E19A                     135      ROL.L   #8, D2      * rotate to the left by 4 to see first 4 bits
00000142  EB9A                     136      ROL.L   #5, D2
00000144  C43C 0007                137      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00000148  B43C 0000                138      CMP.B   #%00000000, D2      * move.b
0000014C  6700 0012                139      BEQ     MOVE_SOURCE_DN
00000150  B43C 0001                140      CMP.B   #%00000001, D2
00000154  6700 002C                141      BEQ     MOVE_SOURCE_AN
00000158  B43C 0002                142      CMP.B   #%00000010, D2
0000015C  6700 0046                143      BEQ     MOVE_SOURCE_AN_010
00000160                           144    
00000160                           145      
00000160                           146  MOVE_SOURCE_DN:
00000160  2403                     147      MOVE.L  D3, D2      * reset address contents to before bitmask
00000162  4842                     148      SWAP    D2
00000164  C43C 0007                149      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00000168  0602 0030                150      ADD.B   #$30, D2
0000016C  14F9 000002B2            151      MOVE.B  D, (A2)+
00000172  14C2                     152      MOVE.B  D2, (A2)+
00000174  14F9 000002FA            153      MOVE.B  COMMA, (A2)+  
0000017A  5678 0000                154      ADD.W      #3, BYTE_COUNTER
0000017E  6000 0052                155      BRA     MOVE_DEST
00000182                           156      
00000182                           157  MOVE_SOURCE_AN:
00000182  2403                     158      MOVE.L  D3, D2      * reset address contents to before bitmask
00000184  4842                     159      SWAP    D2
00000186  C43C 0007                160      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
0000018A  0602 0030                161      ADD.B   #$30, D2
0000018E  14F9 000002AC            162      MOVE.B  A, (A2)+
00000194  14C2                     163      MOVE.B  D2, (A2)+
00000196  14F9 000002FA            164      MOVE.B  COMMA, (A2)+  
0000019C  5678 0000                165      ADD.W      #3, BYTE_COUNTER
000001A0  6000 0030                166      BRA     MOVE_DEST
000001A4                           167      
000001A4                           168  MOVE_SOURCE_AN_010:
000001A4  2403                     169      MOVE.L  D3, D2      * reset address contents to before bitmask
000001A6  4842                     170      SWAP    D2
000001A8  C43C 0007                171      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
000001AC  0602 0030                172      ADD.B   #$30, D2
000001B0  14F9 000002E0            173      MOVE.B  OPEN_PARA, (A2)+
000001B6  14F9 000002AC            174      MOVE.B  A, (A2)+
000001BC  14C2                     175      MOVE.B  D2, (A2)+
000001BE  14F9 000002E2            176      MOVE.B  CLOSE_PARA, (A2)+
000001C4  14F9 000002FA            177      MOVE.B  COMMA, (A2)+  
000001CA  5A78 0000                178      ADD.W      #5, BYTE_COUNTER
000001CE  6000 0002                179      BRA     MOVE_DEST
000001D2                           180  
000001D2                           181      
000001D2                           182          
000001D2                           183  MOVE_DEST:
000001D2  2403                     184      MOVE.L  D3, D2      * reset address contents to before bitmask
000001D4  E19A                     185      ROL.L   #8, D2      * rotate to the left by 4 to see first 4 bits
000001D6  E59A                     186      ROL.L   #2, D2
000001D8  C43C 0007                187      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000001DC  B43C 0000                188      CMP.B   #%00000000, D2      * move.b
000001E0  6700 0012                189      BEQ     MOVE_DEST_DN
000001E4  B43C 0001                190      CMP.B   #%00000001, D2
000001E8  6700 0026                191      BEQ     MOVE_DEST_AN
000001EC  B43C 0002                192      CMP.B   #%00000010, D2
000001F0  6700 003A                193      BEQ     MOVE_DEST_AN_010
000001F4                           194      
000001F4                           195  MOVE_DEST_DN:
000001F4  2403                     196      MOVE.L  D3, D2      * reset address contents to before bitmask
000001F6  EF9A                     197      ROL.L   #7,D2
000001F8  C43C 0007                198      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000001FC  0602 0030                199      ADD.B   #$30, D2
00000200  14F9 000002B2            200      MOVE.B  D, (A2)+
00000206  14C2                     201      MOVE.B  D2, (A2)+
00000208  5478 0000                202      ADD.W      #2, BYTE_COUNTER
0000020C  6000 0056                203      BRA     BUFFER_LOOP
00000210                           204      
00000210                           205  MOVE_DEST_AN:
00000210  2403                     206      MOVE.L  D3, D2      * reset address contents to before bitmask
00000212  EF9A                     207      ROL.L   #7, D2
00000214  C43C 0007                208      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00000218  0602 0030                209      ADD.B   #$30, D2
0000021C  14F9 000002AC            210      MOVE.B  A, (A2)+
00000222  14C2                     211      MOVE.B  D2, (A2)+
00000224  5478 0000                212      ADD.W      #2, BYTE_COUNTER
00000228  6000 003A                213      BRA     BUFFER_LOOP
0000022C                           214      
0000022C                           215  MOVE_DEST_AN_010:
0000022C  2403                     216      MOVE.L  D3, D2      * reset address contents to before bitmask
0000022E  EF9A                     217      ROL.L   #7, D2
00000230  C43C 0007                218      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00000234  0602 0030                219      ADD.B   #$30, D2
00000238  14F9 000002AC            220      MOVE.B  A, (A2)+
0000023E  14C2                     221      MOVE.B  D2, (A2)+
00000240  5478 0000                222      ADD.W      #2, BYTE_COUNTER
00000244  6000 001E                223      BRA     BUFFER_LOOP
00000248                           224  
00000248                           225  
00000248                           226  
00000248                           227  
00000248                           228  * unkown op-code type
00000248                           229  UNKNOWN:
00000248  14F9 000002B2            230      MOVE.B  D, (A2)+
0000024E  14F9 000002AC            231      MOVE.B  A, (A2)+
00000254  14F9 000002D2            232      MOVE.B  T, (A2)+
0000025A  14F9 000002AC            233      MOVE.B  A, (A2)+
00000260  5878 0000                234      ADD.W      #4, BYTE_COUNTER
00000264                           235  
00000264                           236  
00000264                           237  BUFFER_LOOP:
00000264  B6CA                     238      CMPA       A2,A3                * checking if start/end address match of string
00000266  6700 0006                239      BEQ        PRINT_BUFFER         * finished if addresses match
0000026A  12DB                     240      MOVE.B     (A3)+,(A1)+          * move byte letter from string_store to A1
0000026C  60F6                     241      BRA        BUFFER_LOOP          * loop back untill start/end addresses match
0000026E                           242  
0000026E                           243  PRINT_BUFFER:
0000026E  103C 000F                244      MOVE.B  #15,D0      * move task 15 into D0 
00000272  2206                     245      MOVE.L  D6, D1      * set temp address to D1
00000274  7410                     246      MOVE.L  #16, D2     * HEX conversion
00000276  4E4F                     247      TRAP    #15         * display address
00000278  103C 0000                248      MOVE.B     #0, D0               * trap task 0 to print string in buffer A1
0000027C  43F8 2000                249      LEA        BUFF_POINT,A1    
00000280  3238 0000                250      MOVE.W     BYTE_COUNTER, D1     * need to say how many bytes to print in D1
00000284  4E4F                     251      TRAP #15
00000286                           252  
Line 253 ERROR: Undefined symbol
00000286  4EF9 004DBD16            253      JMP     NEXT_ADDRESS
0000028C                           254  
0000028C                           255  TEST:
0000028C  4EB9 00000292            256      JSR TEST2
00000292                           257  
00000292                           258  TEST2:
00000292  4E75                     259      RTS
00000294                           260  
00000294                           261     
00000294  FFFF FFFF                262      SIMHALT             ; halt simulator
00000298                           263  
00000298                           264  
00000298                           265  * Put variables and constants here
00000298= 30 00                    266  _0          DC.B '0',0
0000029A= 31 00                    267  _1          DC.B '1',0
0000029C= 32 00                    268  _2          DC.B '2',0
0000029E= 33 00                    269  _3          DC.B '3',0
000002A0= 34 00                    270  _4          DC.B '4',0
000002A2= 35 00                    271  _5          DC.B '5',0
000002A4= 36 00                    272  _6          DC.B '6',0
000002A6= 37 00                    273  _7          DC.B '7',0
000002A8= 38 00                    274  _8          DC.B '8',0
000002AA= 39 00                    275  _9          DC.B '9',0
000002AC= 41 00                    276  A           DC.B 'A',0
000002AE= 42 00                    277  B           DC.B 'B',0
000002B0= 43 00                    278  C           DC.B 'C',0
000002B2= 44 00                    279  D           DC.B 'D',0
000002B4= 45 00                    280  E           DC.B 'E',0
000002B6= 46 00                    281  F           DC.B 'F',0
000002B8= 47 00                    282  G           DC.B 'G',0
000002BA= 48 00                    283  H           DC.B 'H',0
000002BC= 49 00                    284  I           DC.B 'I',0
000002BE= 4A 00                    285  J           DC.B 'J',0
000002C0= 4B 00                    286  K           DC.B 'K',0
000002C2= 4C 00                    287  L           DC.B 'L',0
000002C4= 4D 00                    288  M           DC.B 'M',0
000002C6= 4E 00                    289  N           DC.B 'N',0
000002C8= 4F 00                    290  O           DC.B 'O',0
000002CA= 50 00                    291  P           DC.B 'P',0
000002CC= 51 00                    292  Q           DC.B 'Q',0
000002CE= 52 00                    293  R           DC.B 'R',0
000002D0= 53 00                    294  S           DC.B 'S',0
000002D2= 54 00                    295  T           DC.B 'T',0
000002D4= 55 00                    296  U           DC.B 'U',0
000002D6= 56 00                    297  V           DC.B 'V',0
000002D8= 57 00                    298  W           DC.B 'W',0
000002DA= 58 00                    299  X           DC.B 'X',0
000002DC= 59 00                    300  Y           DC.B 'Y',0
000002DE= 5A 00                    301  Z           DC.B 'Z',0
000002E0= 28 00                    302  OPEN_PARA   DC.B '(',0
000002E2= 29 00                    303  CLOSE_PARA  DC.B ')',0
000002E4= 2E 00                    304  DOT         DC.B '.',0
000002E6= 2B 00                    305  PLUS        DC.B '+',0
000002E8= 2D 00                    306  MINUS       DC.B '-',0  
000002EA= 46494E49 53484544 ...    307  FINISHED    DC.L 'FINISHED',0
000002F6= 20 00                    308  SPACE       DC.B ' ',0
000002F8= 3F 00                    309  QUESTION    DC.B '?',0
000002FA= 2C 00                    310  COMMA       DC.B ',',0
000002FC= 24 00                    311  MONEY       DC.B '$',0
000002FE                           312  
000002FE                           313  
000002FE                           314      *END    START        ; last line of source
000002FE                           315  
000002FE                           316  
000002FE                           317  
000002FE                           318  
000002FE                           319  
000002FE                           320  
000002FE                           321  
000002FE                           322  
Line 323 WARNING: END directive missing, starting address not set

1 error detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   2AC
ADD                 58
B                   2AE
BUFFER_LOOP         264
BUFF_POINT          2000
BYTE                102
BYTE_COUNTER        0
C                   2B0
CLOSE_PARA          2E2
COMMA               2FA
D                   2B2
DOT                 2E4
E                   2B4
F                   2B6
FINISHED            2EA
FIRST4BITS          1C
G                   2B8
H                   2BA
I                   2BC
J                   2BE
K                   2C0
L                   2C2
LONG                12A
M                   2C4
MINUS               2E8
MONEY               2FC
MOVE                72
MOVE_AN             B6
MOVE_DEST           1D2
MOVE_DEST_AN        210
MOVE_DEST_AN_010    22C
MOVE_DEST_DN        1F4
MOVE_DN             90
MOVE_SIZE           E2
MOVE_SOURCE         13E
MOVE_SOURCE_AN      182
MOVE_SOURCE_AN_010  1A4
MOVE_SOURCE_DN      160
N                   2C6
O                   2C8
OPCODE_BEGIN        0
OPEN_PARA           2E0
OP_RTS              58
P                   2CA
PLUS                2E6
PRINT_BUFFER        26E
Q                   2CC
QUESTION            2F8
R                   2CE
S                   2D0
SPACE               2F6
STRING_STORE        3000
T                   2D2
TAB                 9
TEST                28C
TEST2               292
U                   2D4
UNKNOWN             248
V                   2D6
W                   2D8
WORD                116
X                   2DA
Y                   2DC
Z                   2DE
_0                  298
_1                  29A
_2                  29C
_3                  29E
_4                  2A0
_5                  2A2
_6                  2A4
_7                  2A6
_8                  2A8
_9                  2AA
