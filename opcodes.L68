00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/23/2018 6:23:24 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:  OP-CODE and string buffer
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      
00001000  =00002000                  9  BUFF_POINT      EQU     $2000   * where the string buffer lives
00001000  =00000000                 10  BYTE_COUNTER    EQU     0       * counter for the number of bytes the string has
00001000  =00003000                 11  STRING_STORE    EQU     $3000   * where the beginning of the temp string storage lives
00001000                            12  
00001000                            13  
00001000                            14  START:                  ; first instruction of program
00001000                            15  
00001000                            16  * Put program code here
00001000  103C 0000                 17      MOVE.B     #0, D0               * trap task 0 to print string in buffer A1
00001004  43F8 2000                 18      LEA        BUFF_POINT,A1        * pointer to string buffer
00001008  45F8 3000                 19      LEA        STRING_STORE, A2     * A2 stores the pointer to end of string
0000100C  47F8 3000                 20      LEA        STRING_STORE, A3     * A3 stores the pointer to start of string
00001010  31FC 0000 0000            21      MOVE.W     #0, BYTE_COUNTER     * starting byte counter with 0    
00001016                            22      
00001016  1E01                      23      MOVE.B   D1,D7                   * LINE FOR TESTING
00001018                            24       
00001018  14F9 00001136             25      MOVE.B     I,(A2)+              * testing adding letters to string_store         
0000101E  14F9 0000114A             26      MOVE.B     S,(A2)+              * .. same as above
00001024  14F9 0000116D             27      MOVE.B     SPACE,(A2)+
0000102A  14F9 0000114C             28      MOVE.B     T,(A2)+
00001030  14F9 00001134             29      MOVE.B     H,(A2)+
00001036  14F9 00001136             30      MOVE.B     I,(A2)+
0000103C  14F9 0000114A             31      MOVE.B     S,(A2)+
00001042  14F9 0000116D             32      MOVE.B     SPACE,(A2)+
00001048  14F9 00001152             33      MOVE.B     W,(A2)+
0000104E  14F9 00001142             34      MOVE.B     O,(A2)+
00001054  14F9 00001148             35      MOVE.B     R,(A2)+
0000105A  14F9 0000113A             36      MOVE.B     K,(A2)+
00001060  14F9 00001136             37      MOVE.B     I,(A2)+
00001066  14F9 00001140             38      MOVE.B     N,(A2)+
0000106C  14F9 00001132             39      MOVE.B     G,(A2)+
00001072  14F9 0000116F             40      MOVE.B     QUESTION,(A2)+
00001078  14FC 000A                 41      MOVE.B     #$A,(A2)+            * new line
0000107C  14FC 000D                 42      MOVE.B     #$D,(A2)+            * carriage return
00001080  0678 0012 0000            43      ADD.W      #18, BYTE_COUNTER    * need to say how many bytes are in the string.
00001086                            44      
00001086                            45          
00001086                            46  * work in progress, start of op-code debugging
00001086                            47  FIRST4BITS:
00001086  2438 1016                 48      MOVE.L  $1016,D2    * moving long of address $1000 into D2
0000108A  2602                      49      MOVE.L  D2,D3       * save a copy of of contents in D3
0000108C  E95A                      50      ROL.W   #4,D2
0000108E                            51      
0000108E  C43C 000F                 52      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
00001092                            53      
00001092                            54      
00001092  B43C 0001                 55      CMP.B   #%00000001, D2      * move.b
00001096  6700 001A                 56      BEQ     _0001
0000109A  B43C 0003                 57      CMP.B   #%00000011, D2      * move.l
0000109E  6700 003E                 58      BEQ     _0011
000010A2  B43C 0002                 59      CMP.B   #%00000010, D2      * move.w
000010A6  6700 0036                 60      BEQ     _0010
000010AA  B43C 0000                 61      CMP.B   #%00000000, D2      * somthing tbd
000010AE  6700 002E                 62      BEQ     _0000
000010B2                            63      
000010B2                            64      
000010B2                            65  *move.b 
000010B2                            66  _0001:
000010B2  14F9 0000113E             67      MOVE.B  M, (A2)+
000010B8  14F9 00001142             68      MOVE.B  O, (A2)+
000010BE  14F9 00001150             69      MOVE.B  V, (A2)+
000010C4  14F9 0000112E             70      MOVE.B  E, (A2)+
000010CA  14F9 0000115E             71      MOVE.B  DOT, (A2)+
000010D0  14F9 00001128             72      MOVE.B  B, (A2)+
000010D6  14FC 0009                 73      MOVE.B  #$9, (A2)+          * TAB 
000010DA  5E78 0000                 74      ADD.W      #7, BYTE_COUNTER
000010DE                            75      
000010DE                            76      
000010DE                            77  * move.l
000010DE                            78  _0011:
000010DE                            79  
000010DE                            80  *move.w
000010DE                            81  _0010:
000010DE                            82  
000010DE                            83  * something that begins with 0000
000010DE                            84  _0000:
000010DE                            85  
000010DE                            86  
000010DE                            87  * unkown op-code type
000010DE                            88  _UNKNOWN:
000010DE  14F9 0000112C             89      MOVE.B  D, (A2)+
000010E4  14F9 00001126             90      MOVE.B  A, (A2)+
000010EA  14F9 0000114C             91      MOVE.B  T, (A2)+
000010F0  14F9 00001126             92      MOVE.B  A, (A2)+
000010F6  5878 0000                 93      ADD.W      #4, BYTE_COUNTER
000010FA                            94  
000010FA                            95  
000010FA                            96  BUFFER_LOOP:
000010FA  B6CA                      97      CMPA       A2,A3                * checking if start/end address match of string
000010FC  6700 0006                 98      BEQ        PRINT_BUFFER         * finished if addresses match
00001100  12DB                      99      MOVE.B     (A3)+,(A1)+          * move byte letter from string_store to A1
00001102  60F6                     100      BRA        BUFFER_LOOP               * loop back untill start/end addresses match
00001104                           101  
00001104                           102  PRINT_BUFFER:
00001104  43F8 2000                103      LEA        BUFF_POINT,A1    
00001108  3238 0000                104      MOVE.W     BYTE_COUNTER, D1
0000110C  4E4F                     105      TRAP #15
0000110E                           106  
0000110E                           107  
0000110E                           108  
0000110E                           109     
0000110E  FFFF FFFF                110      SIMHALT             ; halt simulator
00001112                           111  
00001112                           112  
00001112                           113  * Put variables and constants here
00001112= 30 00                    114  _0          DC.B '0',0
00001114= 31 00                    115  _1          DC.B '1',0
00001116= 32 00                    116  _2          DC.B '2',0
00001118= 33 00                    117  _3          DC.B '3',0
0000111A= 34 00                    118  _4          DC.B '4',0
0000111C= 35 00                    119  _5          DC.B '5',0
0000111E= 36 00                    120  _6          DC.B '6',0
00001120= 37 00                    121  _7          DC.B '7',0
00001122= 38 00                    122  _8          DC.B '8',0
00001124= 39 00                    123  _9          DC.B '9',0
00001126= 41 00                    124  A           DC.B 'A',0
00001128= 42 00                    125  B           DC.B 'B',0
0000112A= 43 00                    126  C           DC.B 'C',0
0000112C= 44 00                    127  D           DC.B 'D',0
0000112E= 45 00                    128  E           DC.B 'E',0
00001130= 46 00                    129  F           DC.B 'F',0
00001132= 47 00                    130  G           DC.B 'G',0
00001134= 48 00                    131  H           DC.B 'H',0
00001136= 49 00                    132  I           DC.B 'I',0
00001138= 4A 00                    133  J           DC.B 'J',0
0000113A= 4B 00                    134  K           DC.B 'K',0
0000113C= 4C 00                    135  L           DC.B 'L',0
0000113E= 4D 00                    136  M           DC.B 'M',0
00001140= 4E 00                    137  N           DC.B 'N',0
00001142= 4F 00                    138  O           DC.B 'O',0
00001144= 50 00                    139  P           DC.B 'P',0
00001146= 51 00                    140  Q           DC.B 'Q',0
00001148= 52 00                    141  R           DC.B 'R',0
0000114A= 53 00                    142  S           DC.B 'S',0
0000114C= 54 00                    143  T           DC.B 'T',0
0000114E= 55 00                    144  U           DC.B 'U',0
00001150= 56 00                    145  V           DC.B 'V',0
00001152= 57 00                    146  W           DC.B 'W',0
00001154= 58 00                    147  X           DC.B 'X',0
00001156= 59 00                    148  Y           DC.B 'Y',0
00001158= 5A 00                    149  Z           DC.B 'Z',0
0000115A= 28 00                    150  OPEN_PARA   DC.B '(',0
0000115C= 29 00                    151  CLOSE_PARA  DC.B ')',0
0000115E= 2E 00                    152  DOT         DC.B '.',0
00001160= 2B 00                    153  PLUS        DC.B '+',0
00001162= 2D 00                    154  MINUS       DC.B '-',0  
00001164= 46 49 4E 49 53 48 ...    155  FINISHED    DC.B 'FINISHED',0
0000116D= 20 00                    156  SPACE       DC.B ' ',0
0000116F= 3F 00                    157  QUESTION    DC.B '?',0
00001171                           158  
00001171                           159  
00001171                           160  
00001171                           161      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1126
B                   1128
BUFFER_LOOP         10FA
BUFF_POINT          2000
BYTE_COUNTER        0
C                   112A
CLOSE_PARA          115C
D                   112C
DOT                 115E
E                   112E
F                   1130
FINISHED            1164
FIRST4BITS          1086
G                   1132
H                   1134
I                   1136
J                   1138
K                   113A
L                   113C
M                   113E
MINUS               1162
N                   1140
O                   1142
OPEN_PARA           115A
P                   1144
PLUS                1160
PRINT_BUFFER        1104
Q                   1146
QUESTION            116F
R                   1148
S                   114A
SPACE               116D
START               1000
STRING_STORE        3000
T                   114C
U                   114E
V                   1150
W                   1152
X                   1154
Y                   1156
Z                   1158
_0                  1112
_0000               10DE
_0001               10B2
_0010               10DE
_0011               10DE
_1                  1114
_2                  1116
_3                  1118
_4                  111A
_5                  111C
_6                  111E
_7                  1120
_8                  1122
_9                  1124
_UNKNOWN            10DE
