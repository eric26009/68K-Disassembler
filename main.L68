00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/1/2018 1:24:24 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:  MAIN
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      
00001000  =00001024                  9  START_ADDRESS   EQU     $1024       * hard coded start address
00001000  =00001308                 10  END_ADDRESS     EQU     $1308       * hard coded end address
00001000                            11      
00001000                            12     
00001000                            13      
00001000                            14  START:                  
00001000  49F8 1024                 15      LEA     START_ADDRESS, A4       * loading start address into A4
00001004  4BF8 1308                 16      LEA     END_ADDRESS, A5         * load ing end address into A5
00001008                            17      
00001008                            18  MAIN:
00001008  B9CD                      19      CMP.L   A5,A4                   * comparing start/end addresses
0000100A  6C00 000C                 20      BGE.L   COMPLETED               * greater than or equal means done
0000100E  BBCC                      21      CMP.L   A4,A5
00001010  6600 001E                 22      BNE     OPCODE_BEGIN            * not done yet, so fetch next opcode
00001014                            23      
00001014                            24  NEXT_ADDRESS:
00001014  548C                      25      ADD.L   #$2, A4                 * incrementing address here by 2, needs to be changed
00001016  60F0                      26      BRA     MAIN                    * go back to check addresses in MAIN
00001018                            27      
00001018                            28  COMPLETED:
00001018  43F9 00001360             29      LEA FINISHED, A1                * load finished message
0000101E  103C 000D                 30      MOVE.B  #13, D0                 * displaying message
00001022  4E4F                      31      TRAP #15
00001024                            32  
00001024  2A56                      33      MOVEA.L   (A6),A5                     * LINE FOR TESTING
00001026  183C 0005                 34      MOVE.B   #5,D4
0000102A  1A04                      35      MOVE.B   D4,D5
0000102C                            36      
0000102C                            37      
0000102C  FFFF FFFF                 38      SIMHALT             ; halt simulator
00001030                            39  
00001030                            40  * Put variables and constants here
00001030                            41   INCLUDE "/Users/Eric/Google Drive/Fall 2018/422/68k_git/68K-Disassembler/opcodes.x68"
00001030                            42      *ORG    $1000
00001030                            43      
00001030  =00002000                 44  BUFF_POINT      EQU     $2000   * where the string buffer lives
00001030  =00000000                 45  BYTE_COUNTER    EQU     0       * counter for the number of bytes the string has
00001030  =00003000                 46  STRING_STORE    EQU     $3000   * where the beginning of the temp string storage lives
00001030  =00000009                 47  TAB             EQU     $9      * ASCII hex for tab
00001030                            48  
00001030                            49  
00001030                            50  
00001030                            51  OPCODE_BEGIN:
00001030  43F8 2000                 52      LEA        BUFF_POINT,A1        * pointer to string buffer
00001034  45F8 3000                 53      LEA        STRING_STORE, A2     * A2 stores the pointer to end of string
00001038  47F8 3000                 54      LEA        STRING_STORE, A3     * A3 stores the pointer to start of string
0000103C  31FC 0000 0000            55      MOVE.W     #0, BYTE_COUNTER     * starting byte counter with 0  
00001042                            56      
00001042  1A3C 0000                 57      MOVE.B    #0, D5                * RESETTING HEX CONVERTER COUNTER
00001046  2C0C                      58      MOVE.L  A4,D6
00001048  2E06                      59      MOVE.L  D6,D7
0000104A  14F9 00001372             60      MOVE.B     MONEY, (A2)+         * adding a MONEY SYMBOL to the beginning
00001050  5278 0000                 61      ADD.W      #1, BYTE_COUNTER
00001054  6000 0272                 62      BRA        HEX_CHAR
00001058                            63  CONTINUE:
00001058  14F9 0000136C             64      MOVE.B     SPACE, (A2)+         * adding a space to the beginning
0000105E  5278 0000                 65      ADD.W      #1, BYTE_COUNTER
00001062                            66     
00001062                            67  
00001062                            68      
00001062                            69          
00001062                            70  FIRST4BITS:
00001062  3414                      71      MOVE.W  (A4),D2    * moving long of address $1000 into D2
00001064  3C0C                      72      MOVE.W  A4,D6   * ******temp holds the address, needs to be changed************
00001066  3602                      73      MOVE.W  D2,D3       * save a copy of of contents in D3
00001068                            74      
00001068  B4BC 4E75FFFF             75      CMP.L   #$4E75FFFF, D2
0000106E  6700 002E                 76      BEQ     OP_RTS
00001072                            77      
00001072  2403                      78      MOVE.L  D3,D2
00001074  E95A                      79      ROL.W   #4,D2       * rotate to the left by 4 to see first 4 bits
00001076  C43C 000F                 80      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
0000107A                            81      
0000107A                            82      *MOVE.L  D3,D2
0000107A  B43C 0001                 83      CMP.B   #%00000001, D2      * move.b
0000107E  6700 0038                 84      BEQ     MOVE
00001082  B43C 0003                 85      CMP.B   #%00000011, D2      * move.l
00001086  6700 0030                 86      BEQ     MOVE
0000108A  B43C 0002                 87      CMP.B   #%00000010, D2      * move.w
0000108E  6700 0028                 88      BEQ     MOVE
00001092  B43C 000D                 89      CMP.B   #%00001101, D2      * ADD
00001096  6700 0006                 90      BEQ     ADD
0000109A                            91      *CMP.B   #%00000000, D2      * somthing tbd
0000109A                            92      *BEQ     _0000
0000109A  6000 01EC                 93      BRA UNKNOWN
0000109E                            94      
0000109E                            95  ADD:
0000109E                            96  
0000109E                            97      
0000109E                            98  OP_RTS:
0000109E  14F9 00001344             99      MOVE.B  R, (A2)+
000010A4  14F9 00001348            100      MOVE.B  T, (A2)+
000010AA  14F9 00001346            101      MOVE.B  S, (A2)+
000010B0  5678 0000                102      ADD.W   #3, BYTE_COUNTER
000010B4  6000 01EE                103      BRA     BUFFER_LOOP
000010B8                           104          
000010B8                           105  MOVE:
000010B8  3403                     106      MOVE.W  D3, D2      * reset address contents to before bitmask
000010BA  E15A                     107      ROL.W   #8, D2     * now checking the destination mode set by rotating left by 10
000010BC  E55A                     108      ROL.W   #2, D2
000010BE  C43C 0007                109      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000010C2  B43C 0000                110      CMP.B   #%00000000, D2      * move.b
000010C6  6700 000E                111      BEQ     MOVE_DN
000010CA  B43C 0001                112      CMP.B   #%00000001, D2
000010CE  6700 002C                113      BEQ     MOVE_AN
000010D2  6000 01B4                114      BRA     UNKNOWN
000010D6                           115      
000010D6                           116  MOVE_DN:
000010D6  14F9 0000133A            117      MOVE.B  M, (A2)+
000010DC  14F9 0000133E            118      MOVE.B  O, (A2)+
000010E2  14F9 0000134C            119      MOVE.B  V, (A2)+
000010E8  14F9 0000132A            120      MOVE.B  E, (A2)+
000010EE  14F9 0000135A            121      MOVE.B  DOT, (A2)+
000010F4  5A78 0000                122      ADD.W      #5, BYTE_COUNTER
000010F8  6000 002E                123      BRA MOVE_SIZE
000010FC                           124      
000010FC                           125      
000010FC                           126  MOVE_AN:
000010FC  14F9 0000133A            127      MOVE.B  M, (A2)+
00001102  14F9 0000133E            128      MOVE.B  O, (A2)+
00001108  14F9 0000134C            129      MOVE.B  V, (A2)+
0000110E  14F9 0000132A            130      MOVE.B  E, (A2)+
00001114  14F9 00001322            131      MOVE.B  A, (A2)+
0000111A  14F9 0000135A            132      MOVE.B  DOT, (A2)+
00001120  5C78 0000                133      ADD.W      #6, BYTE_COUNTER
00001124  6000 0002                134      BRA MOVE_SIZE
00001128                           135  
00001128                           136  
00001128                           137      
00001128                           138  MOVE_SIZE:
00001128  3403                     139      MOVE.W  D3, D2      * reset address contents to before bitmask
0000112A  E95A                     140      ROL.W   #4,D2       * rotate to the left by 4 to see first 4 bits
0000112C  C43C 000F                141      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
00001130  B43C 0001                142      CMP.B   #%00000001, D2      * move.b
00001134  6700 0012                143      BEQ     BYTE
00001138  B43C 0003                144      CMP.B   #%00000011, D2      * move.l
0000113C  6700 001E                145      BEQ     WORD
00001140  B43C 0002                146      CMP.B   #%00000010, D2      * move.w
00001144  6700 002A                147      BEQ     LONG
00001148                           148  
00001148                           149      
00001148                           150  BYTE:
00001148  14F9 00001324            151      MOVE.B  B, (A2)+
0000114E  14F9 0000136C            152      MOVE.B  SPACE,(A2)+
00001154  5478 0000                153      ADD.W      #2, BYTE_COUNTER
00001158  6000 002A                154      BRA     MOVE_SOURCE
0000115C                           155  
0000115C                           156  WORD:
0000115C  14F9 0000134E            157      MOVE.B  W, (A2)+
00001162  14F9 0000136C            158      MOVE.B  SPACE, (A2)+
00001168  5478 0000                159      ADD.W      #2, BYTE_COUNTER
0000116C  6000 0016                160      BRA     MOVE_SOURCE
00001170                           161      
00001170                           162  LONG:
00001170  14F9 00001338            163      MOVE.B  L, (A2)+
00001176  14F9 0000136C            164      MOVE.B  SPACE,(A2)+
0000117C  5478 0000                165      ADD.W      #2, BYTE_COUNTER
00001180  6000 0002                166      BRA     MOVE_SOURCE
00001184                           167      
00001184                           168      
00001184                           169  MOVE_SOURCE:
00001184  3403                     170      MOVE.W  D3, D2      * reset address contents to before bitmask
00001186  E15A                     171      ROL.W   #8, D2      * rotate to the left by 4 to see first 4 bits
00001188  EB5A                     172      ROL.W   #5, D2
0000118A  C43C 0007                173      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
0000118E  B43C 0000                174      CMP.B   #%00000000, D2      * move.b
00001192  6700 0012                175      BEQ     MOVE_SOURCE_DN
00001196  B43C 0001                176      CMP.B   #%00000001, D2
0000119A  6700 002A                177      BEQ     MOVE_SOURCE_AN
0000119E  B43C 0002                178      CMP.B   #%00000010, D2
000011A2  6700 0042                179      BEQ     MOVE_SOURCE_AN_010
000011A6                           180    
000011A6                           181      
000011A6                           182  MOVE_SOURCE_DN:
000011A6  3403                     183      MOVE.W  D3, D2      * reset address contents to before bitmask
000011A8                           184   *   SWAP    D2
000011A8  C43C 0007                185      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000011AC  0602 0030                186      ADD.B   #$30, D2
000011B0  14F9 00001328            187      MOVE.B  D, (A2)+
000011B6  14C2                     188      MOVE.B  D2, (A2)+
000011B8  14F9 00001370            189      MOVE.B  COMMA, (A2)+  
000011BE  5678 0000                190      ADD.W      #3, BYTE_COUNTER
000011C2  6000 004E                191      BRA     MOVE_DEST
000011C6                           192      
000011C6                           193  MOVE_SOURCE_AN:
000011C6  3403                     194      MOVE.W  D3, D2      * reset address contents to before bitmask
000011C8                           195      *SWAP    D2          * ***** NOT SURE THIS WORKS>> CHECK
000011C8  C43C 0007                196      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
000011CC  0602 0030                197      ADD.B   #$30, D2
000011D0  14F9 00001322            198      MOVE.B  A, (A2)+
000011D6  14C2                     199      MOVE.B  D2, (A2)+
000011D8  14F9 00001370            200      MOVE.B  COMMA, (A2)+  
000011DE  5678 0000                201      ADD.W      #3, BYTE_COUNTER
000011E2  6000 002E                202      BRA     MOVE_DEST
000011E6                           203      
000011E6                           204  MOVE_SOURCE_AN_010:
000011E6  3403                     205      MOVE.W  D3, D2      * reset address contents to before bitmask
000011E8                           206    *  SWAP    D2
000011E8  C43C 0007                207      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
000011EC  0602 0030                208      ADD.B   #$30, D2
000011F0  14F9 00001356            209      MOVE.B  OPEN_PARA, (A2)+
000011F6  14F9 00001322            210      MOVE.B  A, (A2)+
000011FC  14C2                     211      MOVE.B  D2, (A2)+
000011FE  14F9 00001358            212      MOVE.B  CLOSE_PARA, (A2)+
00001204  14F9 00001370            213      MOVE.B  COMMA, (A2)+  
0000120A  5A78 0000                214      ADD.W      #5, BYTE_COUNTER
0000120E  6000 0002                215      BRA     MOVE_DEST
00001212                           216  
00001212                           217      
00001212                           218          
00001212                           219  MOVE_DEST:
00001212  3403                     220      MOVE.W  D3, D2      * reset address contents to before bitmask
00001214  E15A                     221      ROL.W   #8, D2      * rotate to the left by 4 to see first 4 bits
00001216  E55A                     222      ROL.W   #2, D2
00001218  C43C 0007                223      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
0000121C  B43C 0000                224      CMP.B   #%00000000, D2      * move.b
00001220  6700 0012                225      BEQ     MOVE_DEST_DN
00001224  B43C 0001                226      CMP.B   #%00000001, D2
00001228  6700 0026                227      BEQ     MOVE_DEST_AN
0000122C  B43C 0002                228      CMP.B   #%00000010, D2
00001230  6700 003A                229      BEQ     MOVE_DEST_AN_010
00001234                           230      
00001234                           231  MOVE_DEST_DN:
00001234  3403                     232      MOVE.W  D3, D2      * reset address contents to before bitmask
00001236  EF5A                     233      ROL.W   #7,D2
00001238  C43C 0007                234      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
0000123C  0602 0030                235      ADD.B   #$30, D2
00001240  14F9 00001328            236      MOVE.B  D, (A2)+
00001246  14C2                     237      MOVE.B  D2, (A2)+
00001248  5478 0000                238      ADD.W      #2, BYTE_COUNTER
0000124C  6000 0056                239      BRA     BUFFER_LOOP
00001250                           240      
00001250                           241  MOVE_DEST_AN:
00001250  3403                     242      MOVE.W  D3, D2      * reset address contents to before bitmask
00001252  EF5A                     243      ROL.W   #7, D2
00001254  C43C 0007                244      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001258  0602 0030                245      ADD.B   #$30, D2
0000125C  14F9 00001322            246      MOVE.B  A, (A2)+
00001262  14C2                     247      MOVE.B  D2, (A2)+
00001264  5478 0000                248      ADD.W      #2, BYTE_COUNTER
00001268  6000 003A                249      BRA     BUFFER_LOOP
0000126C                           250      
0000126C                           251  MOVE_DEST_AN_010:
0000126C  3403                     252      MOVE.W  D3, D2      * reset address contents to before bitmask
0000126E  EF5A                     253      ROL.W   #7, D2
00001270  C43C 0007                254      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001274  0602 0030                255      ADD.B   #$30, D2
00001278  14F9 00001322            256      MOVE.B  A, (A2)+
0000127E  14C2                     257      MOVE.B  D2, (A2)+
00001280  5478 0000                258      ADD.W      #2, BYTE_COUNTER
00001284  6000 001E                259      BRA     BUFFER_LOOP
00001288                           260  
00001288                           261  
00001288                           262  
00001288                           263  
00001288                           264  UNKNOWN:
00001288  14F9 00001328            265      MOVE.B  D, (A2)+
0000128E  14F9 00001322            266      MOVE.B  A, (A2)+
00001294  14F9 00001348            267      MOVE.B  T, (A2)+
0000129A  14F9 00001322            268      MOVE.B  A, (A2)+
000012A0  5878 0000                269      ADD.W      #4, BYTE_COUNTER
000012A4                           270  
000012A4                           271  
000012A4                           272  BUFFER_LOOP:
000012A4  B6CA                     273      CMPA       A2,A3                * checking if start/end address match of string
000012A6  6700 0006                274      BEQ        PRINT_BUFFER         * finished if addresses match
000012AA  12DB                     275      MOVE.B     (A3)+,(A1)+          * move byte letter from string_store to A1
000012AC  60F6                     276      BRA        BUFFER_LOOP          * loop back untill start/end addresses match
000012AE                           277  
000012AE                           278  PRINT_BUFFER:
000012AE  103C 0000                279      MOVE.B     #0, D0               * trap task 0 to print string in buffer A1
000012B2  43F8 2000                280      LEA        BUFF_POINT,A1    
000012B6  3238 0000                281      MOVE.W     BYTE_COUNTER, D1     * need to say how many bytes to print in D1
000012BA  4E4F                     282      TRAP #15
000012BC                           283  
000012BC  4EF8 1014                284      JMP     NEXT_ADDRESS
000012C0                           285  
000012C0                           286  TEST:
000012C0  4EB9 000012C6            287      JSR TEST2
000012C6                           288  
000012C6                           289  TEST2:
000012C6  4E75                     290      RTS
000012C8                           291      
000012C8                           292  HEX_CHAR:
000012C8  BA3C 0004                293      CMP.B   #4,D5
000012CC  6700 FD8A                294      BEQ     CONTINUE
000012D0  2E06                     295      MOVE.L  D6,D7
000012D2  CC7C F000                296      AND.W   #%1111000000000000, D6
000012D6  E05E                     297      ROR.W   #8,D6
000012D8  E85E                     298      ROR.W   #4,D6
000012DA  5205                     299      ADD.B   #1,D5
000012DC  BCBC 00000009            300      CMP.L   #9, D6
000012E2  6F00 0006                301      BLE     NUMBER
000012E6  6C00 0012                302      BGE     LETTER   
000012EA                           303      
000012EA                           304  NUMBER:
000012EA  0606 0030                305      ADD.B   #$30, D6
000012EE  14C6                     306      MOVE.B  D6, (A2)+
000012F0  5278 0000                307      ADD.W      #1, BYTE_COUNTER
000012F4  E95F                     308      ROL.W   #4,D7
000012F6  2C07                     309      MOVE.L  D7,D6
000012F8  60CE                     310      BRA     HEX_CHAR
000012FA                           311  
000012FA                           312  LETTER:
000012FA  0606 0037                313      ADD.B   #$37, D6
000012FE  14C6                     314      MOVE.B  D6, (A2)+
00001300  5278 0000                315      ADD.W      #1, BYTE_COUNTER
00001304  E95F                     316      ROL.W   #4,D7
00001306  2C07                     317      MOVE.L  D7,D6
00001308  60BE                     318      BRA     HEX_CHAR
0000130A                           319  
0000130A                           320     
0000130A  FFFF FFFF                321      SIMHALT             ; halt simulator
0000130E                           322  
0000130E                           323  
0000130E= 30 00                    324  _0          DC.B '0',0
00001310= 31 00                    325  _1          DC.B '1',0
00001312= 32 00                    326  _2          DC.B '2',0
00001314= 33 00                    327  _3          DC.B '3',0
00001316= 34 00                    328  _4          DC.B '4',0
00001318= 35 00                    329  _5          DC.B '5',0
0000131A= 36 00                    330  _6          DC.B '6',0
0000131C= 37 00                    331  _7          DC.B '7',0
0000131E= 38 00                    332  _8          DC.B '8',0
00001320= 39 00                    333  _9          DC.B '9',0
00001322= 41 00                    334  A           DC.B 'A',0
00001324= 42 00                    335  B           DC.B 'B',0
00001326= 43 00                    336  C           DC.B 'C',0
00001328= 44 00                    337  D           DC.B 'D',0
0000132A= 45 00                    338  E           DC.B 'E',0
0000132C= 46 00                    339  F           DC.B 'F',0
0000132E= 47 00                    340  G           DC.B 'G',0
00001330= 48 00                    341  H           DC.B 'H',0
00001332= 49 00                    342  I           DC.B 'I',0
00001334= 4A 00                    343  J           DC.B 'J',0
00001336= 4B 00                    344  K           DC.B 'K',0
00001338= 4C 00                    345  L           DC.B 'L',0
0000133A= 4D 00                    346  M           DC.B 'M',0
0000133C= 4E 00                    347  N           DC.B 'N',0
0000133E= 4F 00                    348  O           DC.B 'O',0
00001340= 50 00                    349  P           DC.B 'P',0
00001342= 51 00                    350  Q           DC.B 'Q',0
00001344= 52 00                    351  R           DC.B 'R',0
00001346= 53 00                    352  S           DC.B 'S',0
00001348= 54 00                    353  T           DC.B 'T',0
0000134A= 55 00                    354  U           DC.B 'U',0
0000134C= 56 00                    355  V           DC.B 'V',0
0000134E= 57 00                    356  W           DC.B 'W',0
00001350= 58 00                    357  X           DC.B 'X',0
00001352= 59 00                    358  Y           DC.B 'Y',0
00001354= 5A 00                    359  Z           DC.B 'Z',0
00001356= 28 00                    360  OPEN_PARA   DC.B '(',0
00001358= 29 00                    361  CLOSE_PARA  DC.B ')',0
0000135A= 2E 00                    362  DOT         DC.B '.',0
0000135C= 2B 00                    363  PLUS        DC.B '+',0
0000135E= 2D 00                    364  MINUS       DC.B '-',0  
00001360= 46494E49 53484544 ...    365  FINISHED    DC.L 'FINISHED',0
0000136C= 20 00                    366  SPACE       DC.B ' ',0
0000136E= 3F 00                    367  QUESTION    DC.B '?',0
00001370= 2C 00                    368  COMMA       DC.B ',',0
00001372= 24 00                    369  MONEY       DC.B '$',0
00001374                           370  
00001374                           371  
00001374                           372      *END    START        ; last line of source
00001374                           373  
00001374                           374  
00001374                           375  
00001374                           376  
00001374                           377  
00001374                           378  
00001374                           379  
00001374                           380  
00001374                           381  
00001374                           382  
00001374                           383  
00001374                           384  
00001374                           385  
00001374                           386  
00001374                           387  
00001374                           388  -------------------- end include --------------------
00001374                           389  
00001374                           390      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1322
ADD                 109E
B                   1324
BUFFER_LOOP         12A4
BUFF_POINT          2000
BYTE                1148
BYTE_COUNTER        0
C                   1326
CLOSE_PARA          1358
COMMA               1370
COMPLETED           1018
CONTINUE            1058
D                   1328
DOT                 135A
E                   132A
END_ADDRESS         1308
F                   132C
FINISHED            1360
FIRST4BITS          1062
G                   132E
H                   1330
HEX_CHAR            12C8
I                   1332
J                   1334
K                   1336
L                   1338
LETTER              12FA
LONG                1170
M                   133A
MAIN                1008
MINUS               135E
MONEY               1372
MOVE                10B8
MOVE_AN             10FC
MOVE_DEST           1212
MOVE_DEST_AN        1250
MOVE_DEST_AN_010    126C
MOVE_DEST_DN        1234
MOVE_DN             10D6
MOVE_SIZE           1128
MOVE_SOURCE         1184
MOVE_SOURCE_AN      11C6
MOVE_SOURCE_AN_010  11E6
MOVE_SOURCE_DN      11A6
N                   133C
NEXT_ADDRESS        1014
NUMBER              12EA
O                   133E
OPCODE_BEGIN        1030
OPEN_PARA           1356
OP_RTS              109E
P                   1340
PLUS                135C
PRINT_BUFFER        12AE
Q                   1342
QUESTION            136E
R                   1344
S                   1346
SPACE               136C
START               1000
START_ADDRESS       1024
STRING_STORE        3000
T                   1348
TAB                 9
TEST                12C0
TEST2               12C6
U                   134A
UNKNOWN             1288
V                   134C
W                   134E
WORD                115C
X                   1350
Y                   1352
Z                   1354
_0                  130E
_1                  1310
_2                  1312
_3                  1314
_4                  1316
_5                  1318
_6                  131A
_7                  131C
_8                  131E
_9                  1320
