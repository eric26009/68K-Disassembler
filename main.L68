00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/26/2018 10:34:47 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:  MAIN
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      
00001000  =00001038                  9  START_ADDRESS   EQU     $1038       * hard coded start address
00001000  =00001280                 10  END_ADDRESS     EQU     $1280       * hard coded end address
00001000                            11      
00001000                            12     
00001000                            13      
00001000                            14  START:                  
00001000                            15      
00001000  49F8 1038                 16      LEA     START_ADDRESS, A4       * loading start address into A4
00001004  4BF8 1280                 17      LEA     END_ADDRESS, A5         * load ing end address into A5
00001008                            18      
00001008                            19  MAIN:
00001008  B9CD                      20      CMP.L   A5,A4                   * comparing start/end addresses
0000100A  6C00 000C                 21      BGE.L   COMPLETED               * greater than or equal means done
0000100E  BBCC                      22      CMP.L   A4,A5
00001010  6600 0016                 23      BNE     OPCODE_BEGIN            * not done yet, so fetch next opcode
00001014                            24      
00001014                            25  NEXT_ADDRESS:
00001014  548C                      26      ADD.L   #$2, A4                 * incrementing address here by 2, needs to be changed
00001016  60F0                      27      BRA     MAIN                    * go back to check addresses in MAIN
00001018                            28     
00001018                            29      
00001018                            30  COMPLETED:
00001018  43F9 00001310             31      LEA FINISHED, A1                * load finished message
0000101E  103C 000D                 32      MOVE.B  #13, D0                 * displaying message
00001022  4E4F                      33      TRAP #15
00001024                            34  
00001024                            35      
00001024                            36      
00001024  FFFF FFFF                 37      SIMHALT             ; halt simulator
00001028                            38  
00001028                            39  * Put variables and constants here
00001028                            40   INCLUDE "/Users/Eric/Google Drive/Fall 2018/422/68k_git/68K-Disassembler/opcodes.x68"
00001028                            41      *ORG    $1000
00001028                            42      
00001028  =00002000                 43  BUFF_POINT      EQU     $2000   * where the string buffer lives
00001028  =00000000                 44  BYTE_COUNTER    EQU     0       * counter for the number of bytes the string has
00001028  =00003000                 45  STRING_STORE    EQU     $3000   * where the beginning of the temp string storage lives
00001028  =00000009                 46  TAB             EQU     $9      * ASCII hex for tab
00001028                            47  
00001028                            48  
00001028                            49  
00001028                            50  OPCODE_BEGIN:
00001028  43F8 2000                 51      LEA        BUFF_POINT,A1        * pointer to string buffer
0000102C  45F8 3000                 52      LEA        STRING_STORE, A2     * A2 stores the pointer to end of string
00001030  47F8 3000                 53      LEA        STRING_STORE, A3     * A3 stores the pointer to start of string
00001034  31FC 0000 0000            54      MOVE.W     #0, BYTE_COUNTER     * starting byte counter with 0  
0000103A                            55    
0000103A  14F9 0000131C             56      MOVE.B     SPACE, (A2)+         * adding a space to the beginning
00001040  5278 0000                 57      ADD.W      #1, BYTE_COUNTER
00001044                            58      
00001044                            59  
00001044                            60      
00001044                            61          
00001044                            62  FIRST4BITS:
00001044  2414                      63      MOVE.L  (A4),D2    * moving long of address $1000 into D2
00001046  3C0C                      64      MOVE.W  A4,D6   * ******temp holds the address, needs to be changed************
00001048  2602                      65      MOVE.L  D2,D3       * save a copy of of contents in D3
0000104A                            66      
0000104A  B4BC 4E75FFFF             67      CMP.L   #$4E75FFFF, D2
00001050  6700 002E                 68      BEQ     OP_RTS
00001054                            69      
00001054  2403                      70      MOVE.L  D3,D2
00001056  E99A                      71      ROL.L   #4,D2       * rotate to the left by 4 to see first 4 bits
00001058  C43C 000F                 72      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
0000105C                            73      
0000105C                            74      
0000105C  B43C 0001                 75      CMP.B   #%00000001, D2      * move.b
00001060  6700 0038                 76      BEQ     MOVE
00001064  B43C 0003                 77      CMP.B   #%00000011, D2      * move.l
00001068  6700 0030                 78      BEQ     MOVE
0000106C  B43C 0002                 79      CMP.B   #%00000010, D2      * move.w
00001070  6700 0028                 80      BEQ     MOVE
00001074  B43C 000D                 81      CMP.B   #%00001101, D2      * ADD
00001078  6700 0006                 82      BEQ     ADD
0000107C                            83      *CMP.B   #%00000000, D2      * somthing tbd
0000107C                            84      *BEQ     _0000
0000107C  6000 01F2                 85      BRA UNKNOWN
00001080                            86      
00001080                            87  ADD:
00001080                            88  
00001080                            89      
00001080                            90  OP_RTS:
00001080  14F9 000012F4             91      MOVE.B  R, (A2)+
00001086  14F9 000012F8             92      MOVE.B  T, (A2)+
0000108C  14F9 000012F6             93      MOVE.B  S, (A2)+
00001092  5678 0000                 94      ADD.W   #3, BYTE_COUNTER
00001096  6000 01F4                 95      BRA     BUFFER_LOOP
0000109A                            96          
0000109A                            97  MOVE:
0000109A  2403                      98      MOVE.L  D3, D2      * reset address contents to before bitmask
0000109C  E19A                      99      ROL.L   #8, D2     * now checking the destination mode set by rotating left by 10
0000109E  E59A                     100      ROL.L   #2, D2
000010A0  C43C 0007                101      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
000010A4  B43C 0000                102      CMP.B   #%00000000, D2      * move.b
000010A8  6700 000E                103      BEQ     MOVE_DN
000010AC  B43C 0001                104      CMP.B   #%00000001, D2
000010B0  6700 002C                105      BEQ     MOVE_AN
000010B4  6000 01BA                106      BRA     UNKNOWN
000010B8                           107      
000010B8                           108  MOVE_DN:
000010B8  14F9 000012EA            109      MOVE.B  M, (A2)+
000010BE  14F9 000012EE            110      MOVE.B  O, (A2)+
000010C4  14F9 000012FC            111      MOVE.B  V, (A2)+
000010CA  14F9 000012DA            112      MOVE.B  E, (A2)+
000010D0  14F9 0000130A            113      MOVE.B  DOT, (A2)+
000010D6  5A78 0000                114      ADD.W      #5, BYTE_COUNTER
000010DA  6000 002E                115      BRA MOVE_SIZE
000010DE                           116      
000010DE                           117      
000010DE                           118  MOVE_AN:
000010DE  14F9 000012EA            119      MOVE.B  M, (A2)+
000010E4  14F9 000012EE            120      MOVE.B  O, (A2)+
000010EA  14F9 000012FC            121      MOVE.B  V, (A2)+
000010F0  14F9 000012DA            122      MOVE.B  E, (A2)+
000010F6  14F9 000012D2            123      MOVE.B  A, (A2)+
000010FC  14F9 0000130A            124      MOVE.B  DOT, (A2)+
00001102  5C78 0000                125      ADD.W      #6, BYTE_COUNTER
00001106  6000 0002                126      BRA MOVE_SIZE
0000110A                           127  
0000110A                           128  
0000110A                           129      
0000110A                           130  MOVE_SIZE:
0000110A  2403                     131      MOVE.L  D3, D2      * reset address contents to before bitmask
0000110C  E99A                     132      ROL.L   #4,D2       * rotate to the left by 4 to see first 4 bits
0000110E  C43C 000F                133      AND.B   #%00001111, D2      * bitmask to check the first 4 bits for opcode type
00001112  B43C 0001                134      CMP.B   #%00000001, D2      * move.b
00001116  6700 0012                135      BEQ     BYTE
0000111A  B43C 0003                136      CMP.B   #%00000011, D2      * move.l
0000111E  6700 001E                137      BEQ     WORD
00001122  B43C 0002                138      CMP.B   #%00000010, D2      * move.w
00001126  6700 002A                139      BEQ     LONG
0000112A                           140  
0000112A                           141      
0000112A                           142  BYTE:
0000112A  14F9 000012D4            143      MOVE.B  B, (A2)+
00001130  14F9 0000131C            144      MOVE.B  SPACE,(A2)+
00001136  5478 0000                145      ADD.W      #2, BYTE_COUNTER
0000113A  6000 002A                146      BRA     MOVE_SOURCE
0000113E                           147  
0000113E                           148  WORD:
0000113E  14F9 000012FE            149      MOVE.B  W, (A2)+
00001144  14F9 0000131C            150      MOVE.B  SPACE, (A2)+
0000114A  5478 0000                151      ADD.W      #2, BYTE_COUNTER
0000114E  6000 0016                152      BRA     MOVE_SOURCE
00001152                           153      
00001152                           154  LONG:
00001152  14F9 000012E8            155      MOVE.B  L, (A2)+
00001158  14F9 0000131C            156      MOVE.B  SPACE,(A2)+
0000115E  5478 0000                157      ADD.W      #2, BYTE_COUNTER
00001162  6000 0002                158      BRA     MOVE_SOURCE
00001166                           159      
00001166                           160      
00001166                           161  MOVE_SOURCE:
00001166  2403                     162      MOVE.L  D3, D2      * reset address contents to before bitmask
00001168  E19A                     163      ROL.L   #8, D2      * rotate to the left by 4 to see first 4 bits
0000116A  EB9A                     164      ROL.L   #5, D2
0000116C  C43C 0007                165      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001170  B43C 0000                166      CMP.B   #%00000000, D2      * move.b
00001174  6700 0012                167      BEQ     MOVE_SOURCE_DN
00001178  B43C 0001                168      CMP.B   #%00000001, D2
0000117C  6700 002C                169      BEQ     MOVE_SOURCE_AN
00001180  B43C 0002                170      CMP.B   #%00000010, D2
00001184  6700 0046                171      BEQ     MOVE_SOURCE_AN_010
00001188                           172    
00001188                           173      
00001188                           174  MOVE_SOURCE_DN:
00001188  2403                     175      MOVE.L  D3, D2      * reset address contents to before bitmask
0000118A  4842                     176      SWAP    D2
0000118C  C43C 0007                177      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001190  0602 0030                178      ADD.B   #$30, D2
00001194  14F9 000012D8            179      MOVE.B  D, (A2)+
0000119A  14C2                     180      MOVE.B  D2, (A2)+
0000119C  14F9 00001320            181      MOVE.B  COMMA, (A2)+  
000011A2  5678 0000                182      ADD.W      #3, BYTE_COUNTER
000011A6  6000 0052                183      BRA     MOVE_DEST
000011AA                           184      
000011AA                           185  MOVE_SOURCE_AN:
000011AA  2403                     186      MOVE.L  D3, D2      * reset address contents to before bitmask
000011AC  4842                     187      SWAP    D2
000011AE  C43C 0007                188      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
000011B2  0602 0030                189      ADD.B   #$30, D2
000011B6  14F9 000012D2            190      MOVE.B  A, (A2)+
000011BC  14C2                     191      MOVE.B  D2, (A2)+
000011BE  14F9 00001320            192      MOVE.B  COMMA, (A2)+  
000011C4  5678 0000                193      ADD.W      #3, BYTE_COUNTER
000011C8  6000 0030                194      BRA     MOVE_DEST
000011CC                           195      
000011CC                           196  MOVE_SOURCE_AN_010:
000011CC  2403                     197      MOVE.L  D3, D2      * reset address contents to before bitmask
000011CE  4842                     198      SWAP    D2
000011D0  C43C 0007                199      AND.B   #%00000111, D2  * bitmask to see 3 bits for vale
000011D4  0602 0030                200      ADD.B   #$30, D2
000011D8  14F9 00001306            201      MOVE.B  OPEN_PARA, (A2)+
000011DE  14F9 000012D2            202      MOVE.B  A, (A2)+
000011E4  14C2                     203      MOVE.B  D2, (A2)+
000011E6  14F9 00001308            204      MOVE.B  CLOSE_PARA, (A2)+
000011EC  14F9 00001320            205      MOVE.B  COMMA, (A2)+  
000011F2  5A78 0000                206      ADD.W      #5, BYTE_COUNTER
000011F6  6000 0002                207      BRA     MOVE_DEST
000011FA                           208  
000011FA                           209      
000011FA                           210          
000011FA                           211  MOVE_DEST:
000011FA  2403                     212      MOVE.L  D3, D2      * reset address contents to before bitmask
000011FC  E19A                     213      ROL.L   #8, D2      * rotate to the left by 4 to see first 4 bits
000011FE  E59A                     214      ROL.L   #2, D2
00001200  C43C 0007                215      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001204  B43C 0000                216      CMP.B   #%00000000, D2      * move.b
00001208  6700 0012                217      BEQ     MOVE_DEST_DN
0000120C  B43C 0001                218      CMP.B   #%00000001, D2
00001210  6700 0026                219      BEQ     MOVE_DEST_AN
00001214  B43C 0002                220      CMP.B   #%00000010, D2
00001218  6700 003A                221      BEQ     MOVE_DEST_AN_010
0000121C                           222      
0000121C                           223  MOVE_DEST_DN:
0000121C  2403                     224      MOVE.L  D3, D2      * reset address contents to before bitmask
0000121E  EF9A                     225      ROL.L   #7,D2
00001220  C43C 0007                226      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001224  0602 0030                227      ADD.B   #$30, D2
00001228  14F9 000012D8            228      MOVE.B  D, (A2)+
0000122E  14C2                     229      MOVE.B  D2, (A2)+
00001230  5478 0000                230      ADD.W      #2, BYTE_COUNTER
00001234  6000 0056                231      BRA     BUFFER_LOOP
00001238                           232      
00001238                           233  MOVE_DEST_AN:
00001238  2403                     234      MOVE.L  D3, D2      * reset address contents to before bitmask
0000123A  EF9A                     235      ROL.L   #7, D2
0000123C  C43C 0007                236      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
00001240  0602 0030                237      ADD.B   #$30, D2
00001244  14F9 000012D2            238      MOVE.B  A, (A2)+
0000124A  14C2                     239      MOVE.B  D2, (A2)+
0000124C  5478 0000                240      ADD.W      #2, BYTE_COUNTER
00001250  6000 003A                241      BRA     BUFFER_LOOP
00001254                           242      
00001254                           243  MOVE_DEST_AN_010:
00001254  2403                     244      MOVE.L  D3, D2      * reset address contents to before bitmask
00001256  EF9A                     245      ROL.L   #7, D2
00001258  C43C 0007                246      AND.B   #%00000111, D2  * bitmask to see 3 bits for mode
0000125C  0602 0030                247      ADD.B   #$30, D2
00001260  14F9 000012D2            248      MOVE.B  A, (A2)+
00001266  14C2                     249      MOVE.B  D2, (A2)+
00001268  5478 0000                250      ADD.W      #2, BYTE_COUNTER
0000126C  6000 001E                251      BRA     BUFFER_LOOP
00001270                           252  
00001270                           253  
00001270                           254  
00001270                           255  
00001270                           256  UNKNOWN:
00001270  14F9 000012D8            257      MOVE.B  D, (A2)+
00001276  14F9 000012D2            258      MOVE.B  A, (A2)+
0000127C  14F9 000012F8            259      MOVE.B  T, (A2)+
00001282  14F9 000012D2            260      MOVE.B  A, (A2)+
00001288  5878 0000                261      ADD.W      #4, BYTE_COUNTER
0000128C                           262  
0000128C                           263  
0000128C                           264  BUFFER_LOOP:
0000128C  B6CA                     265      CMPA       A2,A3                * checking if start/end address match of string
0000128E  6700 0006                266      BEQ        PRINT_BUFFER         * finished if addresses match
00001292  12DB                     267      MOVE.B     (A3)+,(A1)+          * move byte letter from string_store to A1
00001294  60F6                     268      BRA        BUFFER_LOOP          * loop back untill start/end addresses match
00001296                           269  
00001296                           270  PRINT_BUFFER:
00001296  103C 000F                271      MOVE.B  #15,D0      * move task 15 into D0 
0000129A  2206                     272      MOVE.L  D6, D1      * set temp address to D1
0000129C  7410                     273      MOVE.L  #16, D2     * HEX conversion
0000129E  4E4F                     274      TRAP    #15         * display address
000012A0  103C 0000                275      MOVE.B     #0, D0               * trap task 0 to print string in buffer A1
000012A4  43F8 2000                276      LEA        BUFF_POINT,A1    
000012A8  3238 0000                277      MOVE.W     BYTE_COUNTER, D1     * need to say how many bytes to print in D1
000012AC  4E4F                     278      TRAP #15
000012AE                           279  
000012AE  4EF8 1014                280      JMP     NEXT_ADDRESS
000012B2                           281  
000012B2                           282  TEST:
000012B2  4EB9 000012B8            283      JSR TEST2
000012B8                           284  
000012B8                           285  TEST2:
000012B8  4E75                     286      RTS
000012BA                           287  
000012BA                           288     
000012BA  FFFF FFFF                289      SIMHALT             ; halt simulator
000012BE                           290  
000012BE                           291  
000012BE= 30 00                    292  _0          DC.B '0',0
000012C0= 31 00                    293  _1          DC.B '1',0
000012C2= 32 00                    294  _2          DC.B '2',0
000012C4= 33 00                    295  _3          DC.B '3',0
000012C6= 34 00                    296  _4          DC.B '4',0
000012C8= 35 00                    297  _5          DC.B '5',0
000012CA= 36 00                    298  _6          DC.B '6',0
000012CC= 37 00                    299  _7          DC.B '7',0
000012CE= 38 00                    300  _8          DC.B '8',0
000012D0= 39 00                    301  _9          DC.B '9',0
000012D2= 41 00                    302  A           DC.B 'A',0
000012D4= 42 00                    303  B           DC.B 'B',0
000012D6= 43 00                    304  C           DC.B 'C',0
000012D8= 44 00                    305  D           DC.B 'D',0
000012DA= 45 00                    306  E           DC.B 'E',0
000012DC= 46 00                    307  F           DC.B 'F',0
000012DE= 47 00                    308  G           DC.B 'G',0
000012E0= 48 00                    309  H           DC.B 'H',0
000012E2= 49 00                    310  I           DC.B 'I',0
000012E4= 4A 00                    311  J           DC.B 'J',0
000012E6= 4B 00                    312  K           DC.B 'K',0
000012E8= 4C 00                    313  L           DC.B 'L',0
000012EA= 4D 00                    314  M           DC.B 'M',0
000012EC= 4E 00                    315  N           DC.B 'N',0
000012EE= 4F 00                    316  O           DC.B 'O',0
000012F0= 50 00                    317  P           DC.B 'P',0
000012F2= 51 00                    318  Q           DC.B 'Q',0
000012F4= 52 00                    319  R           DC.B 'R',0
000012F6= 53 00                    320  S           DC.B 'S',0
000012F8= 54 00                    321  T           DC.B 'T',0
000012FA= 55 00                    322  U           DC.B 'U',0
000012FC= 56 00                    323  V           DC.B 'V',0
000012FE= 57 00                    324  W           DC.B 'W',0
00001300= 58 00                    325  X           DC.B 'X',0
00001302= 59 00                    326  Y           DC.B 'Y',0
00001304= 5A 00                    327  Z           DC.B 'Z',0
00001306= 28 00                    328  OPEN_PARA   DC.B '(',0
00001308= 29 00                    329  CLOSE_PARA  DC.B ')',0
0000130A= 2E 00                    330  DOT         DC.B '.',0
0000130C= 2B 00                    331  PLUS        DC.B '+',0
0000130E= 2D 00                    332  MINUS       DC.B '-',0  
00001310= 46494E49 53484544 ...    333  FINISHED    DC.L 'FINISHED',0
0000131C= 20 00                    334  SPACE       DC.B ' ',0
0000131E= 3F 00                    335  QUESTION    DC.B '?',0
00001320= 2C 00                    336  COMMA       DC.B ',',0
00001322= 24 00                    337  MONEY       DC.B '$',0
00001324                           338  
00001324                           339  
00001324                           340      *END    START        ; last line of source
00001324                           341  
00001324                           342  
00001324                           343  
00001324                           344  
00001324                           345  
00001324                           346  
00001324                           347  
00001324                           348  
00001324                           349  
00001324                           350  -------------------- end include --------------------
00001324                           351  
00001324                           352      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   12D2
ADD                 1080
B                   12D4
BUFFER_LOOP         128C
BUFF_POINT          2000
BYTE                112A
BYTE_COUNTER        0
C                   12D6
CLOSE_PARA          1308
COMMA               1320
COMPLETED           1018
D                   12D8
DOT                 130A
E                   12DA
END_ADDRESS         1280
F                   12DC
FINISHED            1310
FIRST4BITS          1044
G                   12DE
H                   12E0
I                   12E2
J                   12E4
K                   12E6
L                   12E8
LONG                1152
M                   12EA
MAIN                1008
MINUS               130E
MONEY               1322
MOVE                109A
MOVE_AN             10DE
MOVE_DEST           11FA
MOVE_DEST_AN        1238
MOVE_DEST_AN_010    1254
MOVE_DEST_DN        121C
MOVE_DN             10B8
MOVE_SIZE           110A
MOVE_SOURCE         1166
MOVE_SOURCE_AN      11AA
MOVE_SOURCE_AN_010  11CC
MOVE_SOURCE_DN      1188
N                   12EC
NEXT_ADDRESS        1014
O                   12EE
OPCODE_BEGIN        1028
OPEN_PARA           1306
OP_RTS              1080
P                   12F0
PLUS                130C
PRINT_BUFFER        1296
Q                   12F2
QUESTION            131E
R                   12F4
S                   12F6
SPACE               131C
START               1000
START_ADDRESS       1038
STRING_STORE        3000
T                   12F8
TAB                 9
TEST                12B2
TEST2               12B8
U                   12FA
UNKNOWN             1270
V                   12FC
W                   12FE
WORD                113E
X                   1300
Y                   1302
Z                   1304
_0                  12BE
_1                  12C0
_2                  12C2
_3                  12C4
_4                  12C6
_5                  12C8
_6                  12CA
_7                  12CC
_8                  12CE
_9                  12D0
